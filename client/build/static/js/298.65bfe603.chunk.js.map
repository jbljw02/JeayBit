{"version":3,"file":"static/js/298.65bfe603.chunk.js","mappings":"+QASMA,EAAUC,wBAGD,SAASC,IACpB,IAAMC,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,MAEjBC,GAAkCC,EAAAA,EAAAA,WAAS,GAAKC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAzCI,EAASF,EAAA,GAAEG,EAAYH,EAAA,GAyD9B,OAvDAI,EAAAA,EAAAA,YAAU,WACN,IAAMC,EAAS,eAAAC,GAAAC,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAC,IAAA,IAAAC,EAAAC,EAAA,OAAAJ,EAAAA,EAAAA,KAAAK,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OACsD,KAA9DL,EAAO,IAAIM,IAAIC,OAAOC,SAASC,MAAMC,aAAaC,IAAI,SAEnD,CAADR,EAAAE,KAAA,SAIA,OAJAF,EAAAC,KAAA,EAEAZ,GAAa,GAEbW,EAAAE,KAAA,EACuBO,EAAAA,EAAMC,KAAK,GAADC,OAAIlC,EAAO,yBAAyB,CAAEoB,KAAAA,GAAQ,CAC3Ee,iBAAiB,IAClB,KAAD,EAFId,EAAQE,EAAAa,KAKdjC,GAASkC,EAAAA,EAAAA,IAAY,CACjBC,KAAMjB,EAASkB,KAAKD,KACpBE,MAAOnB,EAASkB,KAAKC,UAIrBC,EAAAA,EAAAA,KAAqBC,SACrBrC,EAAS,MAITsB,OAAOgB,OAAOf,SAASC,KAAO,IAC9BF,OAAOiB,SACVrB,EAAAE,KAAA,iBAAAF,EAAAC,KAAA,GAAAD,EAAAsB,GAAAtB,EAAA,UAGGkB,EAAAA,EAAAA,KAAqBC,UACrBrC,EAAS,UACTF,GAAS2C,EAAAA,EAAAA,IAAgB,CACrBC,QAAS,wIACTC,YAAa,oBAKjBrB,OAAOgB,OAAOf,SAASC,KAAO,SAC9B1B,GAAS2C,EAAAA,EAAAA,IAAgB,CACrBC,QAAS,wIACTC,YAAa,eACbC,WAAY,mBAEnB,QAEmB,OAFnB1B,EAAAC,KAAA,GAEDZ,GAAa,GAAOW,EAAA2B,OAAA,6BAAA3B,EAAA4B,OAAA,GAAAhC,EAAA,yBAG/B,kBAjDc,OAAAJ,EAAAqC,MAAA,KAAAC,UAAA,KAmDfvC,GACJ,GAAG,CAACX,EAAUE,KAEPiD,EAAAA,EAAAA,KAACC,EAAAA,EAAc,CAClBC,YAAa7C,EACb8C,eAAgB,kBAAM7C,GAAa,EAAM,GACjD,C","sources":["components/auth/child/KakaoCallback.tsx"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { setUserInfo } from '../../../redux/features/userSlice';\nimport { useAppDispatch } from '../../../redux/hooks';\nimport { useNavigate } from 'react-router-dom';\nimport { showNoticeModal } from '../../../redux/features/modalSlice';\nimport checkCurrentScreen from '../../../utils/responsive/checkCurrentScreen';\nimport WorkingSpinner from '../../modal/trade/WorkingSpinnerModal';\n\nconst API_URL = process.env.REACT_APP_API_URL;\n\n// 카카오 인증 후 토큰 발급 및 유저 정보 저장\nexport default function KakaoCallback() {\n    const dispatch = useAppDispatch();\n    const navigate = useNavigate();\n\n    const [isLoading, setIsLoading] = useState(true);\n\n    useEffect(() => {\n        const fetchData = async () => {\n            const code = new URL(window.location.href).searchParams.get('code');\n\n            if (code) {\n                try {\n                    setIsLoading(true);\n\n                    // 카카오 인증 후 토큰 발급\n                    const response = await axios.post(`${API_URL}/oauth/callback/kakao`, { code }, {\n                        withCredentials: true\n                    });\n\n                    // 사용자 정보 저장\n                    dispatch(setUserInfo({\n                        name: response.data.name,\n                        email: response.data.email\n                    }));\n\n                    // 모바일: 직접 리다이렉션\n                    if (checkCurrentScreen().isMobile) {\n                        navigate('/');\n                    }\n                    // 데스크톱: 팝업 창 처리\n                    else {\n                        window.opener.location.href = '/';\n                        window.close();\n                    }\n                } catch (error) {\n                    // 모바일: 직접 리다이렉션\n                    if (checkCurrentScreen().isMobile) {\n                        navigate('/login');\n                        dispatch(showNoticeModal({\n                            content: '로그인에 실패했습니다. 잠시 후 다시 시도해주세요.',\n                            buttonLabel: '확인',\n                        }));\n                    }\n                    // 데스크톱: 팝업 창 처리\n                    else {\n                        window.opener.location.href = '/login';\n                        dispatch(showNoticeModal({\n                            content: '로그인에 실패했습니다. 잠시 후 다시 시도해주세요.',\n                            buttonLabel: '확인',\n                            actionType: 'WINDOW_CLOSE'\n                        }));\n                    }\n                } finally {\n                    setIsLoading(false);\n                }\n            }\n        };\n\n        fetchData();\n    }, [dispatch, navigate]);\n\n    return <WorkingSpinner\n        isModalOpen={isLoading}\n        setIsModalOpen={() => setIsLoading(false)} />\n}"],"names":["API_URL","process","KakaoCallback","dispatch","useAppDispatch","navigate","useNavigate","_useState","useState","_useState2","_slicedToArray","isLoading","setIsLoading","useEffect","fetchData","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","code","response","wrap","_context","prev","next","URL","window","location","href","searchParams","get","axios","post","concat","withCredentials","sent","setUserInfo","name","data","email","checkCurrentScreen","isMobile","opener","close","t0","showNoticeModal","content","buttonLabel","actionType","finish","stop","apply","arguments","_jsx","WorkingSpinner","isModalOpen","setIsModalOpen"],"sourceRoot":""}