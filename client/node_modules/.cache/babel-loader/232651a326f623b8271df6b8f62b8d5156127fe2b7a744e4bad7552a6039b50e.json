{"ast":null,"code":"import _objectSpread from\"C:/VS_Project/JeayBit/client/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import _regeneratorRuntime from\"C:/VS_Project/JeayBit/client/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";import _asyncToGenerator from\"C:/VS_Project/JeayBit/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import _slicedToArray from\"C:/VS_Project/JeayBit/client/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import axios from\"axios\";import{useDispatch,useSelector}from\"react-redux\";import{setUserWallet,setOwnedCrypto,setUserTradeHistory,setUserTradeHistory_unSigned,setIsBuying,setAsking_data,setAsking_dateTime,setAsking_totalAskSize,setAsking_totalBidSize,setAskingData_unSigned,setIsSelling,setTheme}from\"../store\";import{useState}from\"react\";export default function useFunction(){var dispatch=useDispatch();var logInUser=useSelector(function(state){return state.logInUser;});var ownedCrypto=useSelector(function(state){return state.ownedCrypto;});var logInEmail=useSelector(function(state){return state.logInEmail;});var cr_selected=useSelector(function(state){return state.cr_selected;});var userTradeHistory_unSigned=useSelector(function(state){return state.userTradeHistory_unSigned;});var isBuying=useSelector(function(state){return state.isBuying;});var cr_name_selected=useSelector(function(state){return state.cr_name_selected;});var askingData_unSigned=useSelector(function(state){return state.askingData_unSigned;});var filteredData=useSelector(function(state){return state.filteredData;});var userTradeHistory=useSelector(function(state){return state.userTradeHistory;});var theme=useSelector(function(state){return state.theme;});var _useState=useState(new Date()),_useState2=_slicedToArray(_useState,2),time=_useState2[0],setTime=_useState2[1];// 서버로부터 사용자의 잔고량을 받아옴\nvar getBalance=function getBalance(email){_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(){var response;return _regeneratorRuntime().wrap(function _callee$(_context){while(1)switch(_context.prev=_context.next){case 0:_context.prev=0;_context.next=3;return axios.get(\"http://127.0.0.1:8000/get_user_balance/\".concat(email,\"/\"));case 3:response=_context.sent;dispatch(setUserWallet(response.data.user_balance));console.log(logInUser,\"의 잔고 : \",response.data.user_balance);_context.next=11;break;case 8:_context.prev=8;_context.t0=_context[\"catch\"](0);console.log(_context.t0);case 11:case\"end\":return _context.stop();}},_callee,null,[[0,8]]);}))();};// 사용자가 소유하고 있는 화폐의 정보를 받아옴\nvar getOwnedCrypto=function getOwnedCrypto(logInEmail){_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2(){var response;return _regeneratorRuntime().wrap(function _callee2$(_context2){while(1)switch(_context2.prev=_context2.next){case 0:_context2.prev=0;_context2.next=3;return axios.get(\"http://127.0.0.1:8000/get_user_ownedCrypto/\".concat(logInEmail,\"/\"));case 3:response=_context2.sent;dispatch(setOwnedCrypto(response.data));console.log(\"반환값-소유화폐 : \",response.data);_context2.next=11;break;case 8:_context2.prev=8;_context2.t0=_context2[\"catch\"](0);console.log(_context2.t0);case 11:case\"end\":return _context2.stop();}},_callee2,null,[[0,8]]);}))();};// 거래 내역에 저장될 정보를 전송(화폐 매수와 함께)\nvar addTradeHistory=function addTradeHistory(email,cryptoName,tradeCategory,tradeTime,cryptoMarket,cryptoPrice,tradePrice,tradeAmount,isSigned){(function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee3(email,cryptoName,tradeTime,cryptoMarket,cryptoPrice,tradePrice,tradeAmount){var response;return _regeneratorRuntime().wrap(function _callee3$(_context3){while(1)switch(_context3.prev=_context3.next){case 0:_context3.prev=0;_context3.next=3;return axios.post(\"http://127.0.0.1:8000/add_user_tradeHistory/\",{email:email,crypto_name:cryptoName,trade_category:tradeCategory,trade_time:tradeTime,crypto_market:cryptoMarket,crypto_price:cryptoPrice,trade_price:tradePrice,trade_amount:tradeAmount,is_signed:isSigned});case 3:response=_context3.sent;getTradeHistory(logInEmail);console.log(\"거래 내역 전송 성공\",response.data);_context3.next=11;break;case 8:_context3.prev=8;_context3.t0=_context3[\"catch\"](0);console.log(\"거래 내역 전송 실패\",_context3.t0);case 11:case\"end\":return _context3.stop();}},_callee3,null,[[0,8]]);}));return function(_x,_x2,_x3,_x4,_x5,_x6,_x7){return _ref3.apply(this,arguments);};})()(email,cryptoName,tradeTime,cryptoMarket,cryptoPrice,tradePrice,tradeAmount);};// 서버로부터 거래 내역을 받아옴\nvar getTradeHistory=function getTradeHistory(logInEmail){_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee4(){var response,signed,unsigned;return _regeneratorRuntime().wrap(function _callee4$(_context4){while(1)switch(_context4.prev=_context4.next){case 0:_context4.prev=0;_context4.next=3;return axios.get(\"http://127.0.0.1:8000/get_user_tradeHistory/\".concat(logInEmail,\"/\"));case 3:response=_context4.sent;console.log(\"반환값-거래내역 : \",response.data);// 서버로부터 받아온 체결 내역과 미체결 내역을 담을 임시 배열\nsigned=[];unsigned=[];// 다른 요소는 서버에서 받아온 값 그대로 유지, 거래 시간만 형식 변경해서 dispatch\nresponse.data.map(function(item,i){var date=new Date(item.trade_time);var formattedDate=date.getFullYear()+'.'+(date.getMonth()+1).toString().padStart(2,'0')+'.'+date.getDate().toString().padStart(2,'0')+' '+date.getHours().toString().padStart(2,'0')+':'+date.getMinutes().toString().padStart(2,'0');// 체결 여부가 true일 경우\nif(item.is_signed){signed.push(_objectSpread(_objectSpread({},item),{},{trade_time:formattedDate}));}else{unsigned.push(_objectSpread(_objectSpread({},item),{},{trade_time:formattedDate}));var value={name:item.crypto_name,price:item.crypto_price,trade_amount:Number(item.trade_amount),trade_price:Number(item.trade_price)};localStorage.setItem(item.id,JSON.stringify(value));// 체결되지 않은 구매 요청에 대한 ID를 로컬 스토리지에 추가\n}});dispatch(setUserTradeHistory(signed));dispatch(setUserTradeHistory_unSigned(unsigned));_context4.next=15;break;case 12:_context4.prev=12;_context4.t0=_context4[\"catch\"](0);console.log(\"거래내역 받아오기 실패\",_context4.t0);case 15:case\"end\":return _context4.stop();}},_callee4,null,[[0,12]]);}))();};// 모든 화폐의 이름을 받아옴\nvar getCryptoName=function getCryptoName(logInEmail){_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee5(){var response,cryptoNames,localStorageItem,i,key,value,item,isWaitingTemp;return _regeneratorRuntime().wrap(function _callee5$(_context5){while(1)switch(_context5.prev=_context5.next){case 0:_context5.prev=0;_context5.next=3;return axios.get('http://127.0.0.1:8000/get_crypto_name/');case 3:response=_context5.sent;cryptoNames=response.data.detail;localStorageItem=[];for(i=0;i<localStorage.length;i++){key=localStorage.key(i);if(key!==null){value=localStorage.getItem(key);if(value!==null){item=JSON.parse(value);localStorageItem.push(item.name);}}}// 로컬 스토리지의 값에 있는(체결되지 않은) 화폐는 true로, 아니라면 false로 선언\nisWaitingTemp=cryptoNames.reduce(function(obj,name){if(localStorageItem.includes(name)){obj[name]=true;}else{obj[name]=false;}return obj;},{});dispatch(setIsBuying(isWaitingTemp));dispatch(setIsSelling(isWaitingTemp));localStorage.setItem(\"\".concat(logInEmail,\"_IsBuying\"),JSON.stringify(isWaitingTemp));localStorage.setItem(\"\".concat(logInEmail,\"_IsSelling\"),JSON.stringify(isWaitingTemp));_context5.next=17;break;case 14:_context5.prev=14;_context5.t0=_context5[\"catch\"](0);console.log(\"화폐명 받아오기 실패\",_context5.t0);case 17:case\"end\":return _context5.stop();}},_callee5,null,[[0,14]]);}))();};// 모든 화폐의 마켓을 받아옴\nvar getCryptoMarket=function getCryptoMarket(logInEmail){_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee6(){var response,cryptoMarkets,localStorageItem,i,key,value,item,isBuyingTemp;return _regeneratorRuntime().wrap(function _callee6$(_context6){while(1)switch(_context6.prev=_context6.next){case 0:_context6.prev=0;_context6.next=3;return axios.get('http://127.0.0.1:8000/get_crypto_market/');case 3:response=_context6.sent;cryptoMarkets=response.data.markets;localStorageItem=[];for(i=0;i<localStorage.length;i++){key=localStorage.key(i);if(key!==null){value=localStorage.getItem(key);if(value!==null){item=JSON.parse(value);localStorageItem.push(item.market);}}}// 로컬 스토리지의 값에 있는(체결되지 않은) 화폐는 true로, 아니라면 false로 선언\nisBuyingTemp=cryptoMarkets.reduce(function(obj,market){if(localStorageItem.includes(market)){obj[market]=true;}else{obj[market]=false;}return obj;},{});dispatch(setIsBuying(isBuyingTemp));localStorage.setItem(\"\".concat(logInEmail,\"_IsBuying\"),JSON.stringify(isBuyingTemp));_context6.next=15;break;case 12:_context6.prev=12;_context6.t0=_context6[\"catch\"](0);console.log(\"화폐명 받아오기 실패\",_context6.t0);case 15:case\"end\":return _context6.stop();}},_callee6,null,[[0,12]]);}))();};// 선택된 화폐에 대한 호가내역 호출\nvar selectAskingPrice=function selectAskingPrice(market){(function(){var _ref7=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee7(market){var response;return _regeneratorRuntime().wrap(function _callee7$(_context7){while(1)switch(_context7.prev=_context7.next){case 0:_context7.prev=0;_context7.next=3;return axios.post(\"http://127.0.0.1:8000/asking_price/\",{market:market},{headers:{\"Content-Type\":\"application/json\"}});case 3:response=_context7.sent;// console.log(\"호가내역 : \", response.data[0].orderbook_units);\ndispatch(setAsking_data(response.data[0].orderbook_units));dispatch(setAsking_dateTime(response.data[0].timestamp));dispatch(setAsking_totalAskSize(response.data[0].total_ask_size));dispatch(setAsking_totalBidSize(response.data[0].total_bid_size));_context7.next=13;break;case 10:_context7.prev=10;_context7.t0=_context7[\"catch\"](0);console.error(\"호가내역 전송 실패\",_context7.t0);case 13:case\"end\":return _context7.stop();}},_callee7,null,[[0,10]]);}));return function(_x8){return _ref7.apply(this,arguments);};})()(market);};// 미체결 화폐에 대한 호가내역 호출\nvar selectAskingPrice_unSigned=function selectAskingPrice_unSigned(market){(function(){var _ref8=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee8(market){var response,tempState,isCorresponed,marketName;return _regeneratorRuntime().wrap(function _callee8$(_context8){while(1)switch(_context8.prev=_context8.next){case 0:_context8.prev=0;_context8.next=3;return axios.post(\"http://127.0.0.1:8000/asking_price/\",{market:market},{headers:{\"Content-Type\":\"application/json\"}});case 3:response=_context8.sent;// console.log(\"호가내역-미체결 : \", response.data[0]);\ntempState=response.data[0].orderbook_units.map(function(item){return{ask_price:item.ask_price,bid_price:item.bid_price};});// dispatch(setAskingData_unSigned({ market: response.data[0].market, data: tempState }));\n// 마켓명에 대응하는 화폐명을 찾음\nisCorresponed=filteredData.find(function(item){return item.market===response.data[0].market;});marketName=isCorresponed?isCorresponed.name:null;// 마켓명이 아닌 화폐명을 키로 지정\nif(marketName){dispatch(setAskingData_unSigned({market:marketName,data:tempState}));}// console.log(\"미체결 호가값 : \", askingData_unSigned);\n_context8.next=13;break;case 10:_context8.prev=10;_context8.t0=_context8[\"catch\"](0);console.error(\"호가내역-미체결 전송 실패\",_context8.t0);case 13:case\"end\":return _context8.stop();}},_callee8,null,[[0,10]]);}));return function(_x9){return _ref8.apply(this,arguments);};})()(market);};// 호가와 구매가가 일치하지 않을 때\nvar buyCrypto_unSigned=function buyCrypto_unSigned(key,email,cryptoName,cryptoQuantity,buyTotal){(function(){var _ref9=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee9(key,email,cryptoName,cryptoQuantity,buyTotal){var response;return _regeneratorRuntime().wrap(function _callee9$(_context9){while(1)switch(_context9.prev=_context9.next){case 0:_context9.prev=0;_context9.next=3;return axios.post(\"http://127.0.0.1:8000/buy_crypto_unSigned/\",{key:key,email:email,crypto_name:cryptoName,crypto_quantity:cryptoQuantity,buy_total:buyTotal});case 3:response=_context9.sent;console.log(\"구매 화폐 전송 성공\",response.data);getBalance(logInEmail);// 매수에 사용한 금액만큼 차감되기 때문에 잔고 업데이트\ngetOwnedCrypto(logInEmail);// 소유 화폐가 새로 추가될 수 있으니 업데이트\ngetTradeHistory(logInEmail);// 매수에 성공했으니 거래내역 업데이트\nlocalStorage.removeItem(key);_context9.next=14;break;case 11:_context9.prev=11;_context9.t0=_context9[\"catch\"](0);console.log(\"구매 화폐 전송 실패: \",_context9.t0);case 14:case\"end\":return _context9.stop();}},_callee9,null,[[0,11]]);}));return function(_x10,_x11,_x12,_x13,_x14){return _ref9.apply(this,arguments);};})()(key,email,cryptoName,cryptoQuantity,buyTotal);};var sellCrypto_unSigned=function sellCrypto_unSigned(key,email,cryptoName,cryptoQuantity,sellTotal){(function(){var _ref10=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee10(key,email,cryptoName,cryptoQuantity,sellTotal){var response;return _regeneratorRuntime().wrap(function _callee10$(_context10){while(1)switch(_context10.prev=_context10.next){case 0:_context10.prev=0;_context10.next=3;return axios.post(\"http://127.0.0.1:8000/sell_crypto_unSigned/\",{key:key,email:email,crypto_name:cryptoName,crypto_quantity:cryptoQuantity,sell_total:sellTotal});case 3:response=_context10.sent;console.log(\"매도 화폐 전송 성공\",response.data);getBalance(logInEmail);// 매수에 사용한 금액만큼 차감되기 때문에 잔고 업데이트\ngetOwnedCrypto(logInEmail);// 소유 화폐가 새로 추가될 수 있으니 업데이트\ngetTradeHistory(logInEmail);// 매수에 성공했으니 거래내역 업데이트\nlocalStorage.removeItem(key);_context10.next=14;break;case 11:_context10.prev=11;_context10.t0=_context10[\"catch\"](0);console.log(\"매도 화폐 전송 실패: \",_context10.t0);case 14:case\"end\":return _context10.stop();}},_callee10,null,[[0,11]]);}));return function(_x15,_x16,_x17,_x18,_x19){return _ref10.apply(this,arguments);};})()(key,email,cryptoName,cryptoQuantity,sellTotal);};var themeChange=function themeChange(){dispatch(setTheme(!theme));var generalTheme=document.querySelectorAll(\".lightMode, .darkMode\");var titleTheme=document.querySelectorAll(\".lightMode-title, .darkMode-title\");var titleImgTheme=document.querySelectorAll(\".title-img-light, .title-img-dark\");var hoverTheme=document.querySelectorAll(\".hover-lightMode, .hover-darkMode\");// 라이트모드 <-> 다크모드 순회\ngeneralTheme.forEach(function(element){if(!theme){element.classList.remove(\"lightMode\");element.classList.add(\"darkMode\");}else{element.classList.remove(\"darkMode\");element.classList.add(\"lightMode\");}});titleTheme.forEach(function(element){if(!theme){element.classList.remove(\"lightMode-title\");element.classList.add(\"darkMode-title\");}else{element.classList.remove(\"darkMode-title\");element.classList.add(\"lightMode-title\");}});titleImgTheme.forEach(function(element){if(!theme){element.classList.remove(\"title-img-light\");element.classList.add(\"title-img-dark\");}else{element.classList.remove(\"title-img-dark\");element.classList.add(\"title-img-light\");}});hoverTheme.forEach(function(element){if(!theme){element.classList.remove(\"hover-lightMode\");element.classList.add(\"hover-darkMode\");}else{element.classList.remove(\"hover-darkMode\");element.classList.add(\"hover-lightMode\");}});};return{getBalance:getBalance,getOwnedCrypto:getOwnedCrypto,addTradeHistory:addTradeHistory,getTradeHistory:getTradeHistory,getCryptoName:getCryptoName,selectAskingPrice:selectAskingPrice,selectAskingPrice_unSigned:selectAskingPrice_unSigned,buyCrypto_unSigned:buyCrypto_unSigned,sellCrypto_unSigned:sellCrypto_unSigned,themeChange:themeChange};}","map":{"version":3,"names":["axios","useDispatch","useSelector","setUserWallet","setOwnedCrypto","setUserTradeHistory","setUserTradeHistory_unSigned","setIsBuying","setAsking_data","setAsking_dateTime","setAsking_totalAskSize","setAsking_totalBidSize","setAskingData_unSigned","setIsSelling","setTheme","useState","useFunction","dispatch","logInUser","state","ownedCrypto","logInEmail","cr_selected","userTradeHistory_unSigned","isBuying","cr_name_selected","askingData_unSigned","filteredData","userTradeHistory","theme","_useState","Date","_useState2","_slicedToArray","time","setTime","getBalance","email","_asyncToGenerator","_regeneratorRuntime","mark","_callee","response","wrap","_callee$","_context","prev","next","get","concat","sent","data","user_balance","console","log","t0","stop","getOwnedCrypto","_callee2","_callee2$","_context2","addTradeHistory","cryptoName","tradeCategory","tradeTime","cryptoMarket","cryptoPrice","tradePrice","tradeAmount","isSigned","_ref3","_callee3","_callee3$","_context3","post","crypto_name","trade_category","trade_time","crypto_market","crypto_price","trade_price","trade_amount","is_signed","getTradeHistory","_x","_x2","_x3","_x4","_x5","_x6","_x7","apply","arguments","_callee4","signed","unsigned","_callee4$","_context4","map","item","i","date","formattedDate","getFullYear","getMonth","toString","padStart","getDate","getHours","getMinutes","push","_objectSpread","value","name","price","Number","localStorage","setItem","id","JSON","stringify","getCryptoName","_callee5","cryptoNames","localStorageItem","key","isWaitingTemp","_callee5$","_context5","detail","length","getItem","parse","reduce","obj","includes","getCryptoMarket","_callee6","cryptoMarkets","isBuyingTemp","_callee6$","_context6","markets","market","selectAskingPrice","_ref7","_callee7","_callee7$","_context7","headers","orderbook_units","timestamp","total_ask_size","total_bid_size","error","_x8","selectAskingPrice_unSigned","_ref8","_callee8","tempState","isCorresponed","marketName","_callee8$","_context8","ask_price","bid_price","find","_x9","buyCrypto_unSigned","cryptoQuantity","buyTotal","_ref9","_callee9","_callee9$","_context9","crypto_quantity","buy_total","removeItem","_x10","_x11","_x12","_x13","_x14","sellCrypto_unSigned","sellTotal","_ref10","_callee10","_callee10$","_context10","sell_total","_x15","_x16","_x17","_x18","_x19","themeChange","generalTheme","document","querySelectorAll","titleTheme","titleImgTheme","hoverTheme","forEach","element","classList","remove","add"],"sources":["C:/VS_Project/JeayBit/client/src/components/useFuction.tsx"],"sourcesContent":["import axios from \"axios\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { setUserWallet, RootState, setOwnedCrypto, setUserTradeHistory, setUserTradeHistory_unSigned, setIsBuying, setAsking_data, setAsking_dateTime, setAsking_totalAskSize, setAsking_totalBidSize, setAskingData_unSigned, setIsSelling, setTheme } from \"../store\";\r\nimport { useState } from \"react\";\r\n\r\nexport default function useFunction() {\r\n\r\n  const dispatch = useDispatch();\r\n  const logInUser = useSelector((state: RootState) => state.logInUser);\r\n  const ownedCrypto = useSelector((state: RootState) => state.ownedCrypto);\r\n  const logInEmail = useSelector((state: RootState) => state.logInEmail);\r\n  const cr_selected = useSelector((state: RootState) => state.cr_selected);\r\n  const userTradeHistory_unSigned = useSelector((state: RootState) => state.userTradeHistory_unSigned);\r\n  const isBuying = useSelector((state: RootState) => state.isBuying);\r\n  const cr_name_selected = useSelector((state: RootState) => state.cr_name_selected);\r\n  const askingData_unSigned = useSelector((state: RootState) => state.askingData_unSigned);\r\n  const filteredData = useSelector((state: RootState) => state.filteredData);\r\n  const userTradeHistory = useSelector((state: RootState) => state.userTradeHistory);\r\n  const theme = useSelector((state: RootState) => state.theme);\r\n\r\n  const [time, setTime] = useState(new Date());\r\n\r\n  // 서버로부터 사용자의 잔고량을 받아옴\r\n  const getBalance = (email: string) => {\r\n    (async () => {\r\n      try {\r\n        const response = await axios.get(\r\n          `http://127.0.0.1:8000/get_user_balance/${email}/`\r\n        );\r\n        dispatch(setUserWallet(response.data.user_balance));\r\n        console.log(logInUser, \"의 잔고 : \", response.data.user_balance);\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    })();\r\n  };\r\n\r\n  // 사용자가 소유하고 있는 화폐의 정보를 받아옴\r\n  const getOwnedCrypto = (logInEmail: string) => {\r\n    (async () => {\r\n      try {\r\n        const response = await axios.get(\r\n          `http://127.0.0.1:8000/get_user_ownedCrypto/${logInEmail}/`\r\n        );\r\n        dispatch(setOwnedCrypto(response.data))\r\n        console.log(\"반환값-소유화폐 : \", response.data)\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    })()\r\n  }\r\n\r\n  // 거래 내역에 저장될 정보를 전송(화폐 매수와 함께)\r\n  const addTradeHistory = (email: string, cryptoName: string, tradeCategory: string, tradeTime: Date, cryptoMarket: string, cryptoPrice: number, tradePrice: number, tradeAmount: number, isSigned: boolean) => {\r\n    (async (email, cryptoName, tradeTime, cryptoMarket, cryptoPrice, tradePrice, tradeAmount) => {\r\n      try {\r\n        const response = await axios.post(\"http://127.0.0.1:8000/add_user_tradeHistory/\", {\r\n          email: email,\r\n          crypto_name: cryptoName,\r\n          trade_category: tradeCategory,\r\n          trade_time: tradeTime,\r\n          crypto_market: cryptoMarket,\r\n          crypto_price: cryptoPrice,\r\n          trade_price: tradePrice,\r\n          trade_amount: tradeAmount,\r\n          is_signed: isSigned,\r\n        });\r\n        getTradeHistory(logInEmail);\r\n        console.log(\"거래 내역 전송 성공\", response.data)\r\n      } catch (error) {\r\n        console.log(\"거래 내역 전송 실패\", error);\r\n      }\r\n    })(email, cryptoName, tradeTime, cryptoMarket, cryptoPrice, tradePrice, tradeAmount)\r\n  }\r\n\r\n  // 서버로부터 거래 내역을 받아옴\r\n  const getTradeHistory = (logInEmail: string) => {\r\n    (async () => {\r\n      try {\r\n        const response = await axios.get(\r\n          `http://127.0.0.1:8000/get_user_tradeHistory/${logInEmail}/`\r\n        );\r\n        console.log(\"반환값-거래내역 : \", response.data);\r\n\r\n        // 서버로부터 받아온 체결 내역과 미체결 내역을 담을 임시 배열\r\n        const signed: { trade_time: string; is_signed: boolean; id: string; crypto_price: number; crypto_name: string; trade_amount: string; trade_price: string; }[] = [];\r\n        const unsigned: { trade_time: string; is_signed: boolean; id: string; crypto_price: number; crypto_name: string; trade_amount: string; trade_price: string; }[] = [];\r\n\r\n        // 다른 요소는 서버에서 받아온 값 그대로 유지, 거래 시간만 형식 변경해서 dispatch\r\n        response.data.map((item: { trade_time: Date, is_signed: boolean, id: string, crypto_price: number, crypto_name: string, trade_amount: string, trade_price: string }, i: number) => {\r\n          let date = new Date(item.trade_time);\r\n          let formattedDate = date.getFullYear() + '.'\r\n            + (date.getMonth() + 1).toString().padStart(2, '0') + '.'\r\n            + date.getDate().toString().padStart(2, '0') + ' '\r\n            + date.getHours().toString().padStart(2, '0') + ':'\r\n            + date.getMinutes().toString().padStart(2, '0');\r\n\r\n          // 체결 여부가 true일 경우\r\n          if (item.is_signed) {\r\n            signed.push({ ...item, trade_time: formattedDate });\r\n          }\r\n          else {\r\n            unsigned.push({ ...item, trade_time: formattedDate });\r\n\r\n            let value = { name: item.crypto_name, price: item.crypto_price, trade_amount: Number(item.trade_amount), trade_price: Number(item.trade_price) };\r\n            localStorage.setItem(item.id, JSON.stringify(value));  // 체결되지 않은 구매 요청에 대한 ID를 로컬 스토리지에 추가\r\n          }\r\n        });\r\n\r\n        dispatch(setUserTradeHistory(signed));\r\n        dispatch(setUserTradeHistory_unSigned(unsigned));\r\n      } catch (error) {\r\n        console.log(\"거래내역 받아오기 실패\", error);\r\n      }\r\n    })();\r\n  }\r\n\r\n  // 모든 화폐의 이름을 받아옴\r\n  const getCryptoName = (logInEmail: string) => {\r\n    (async () => {\r\n      try {\r\n        const response = await axios.get(\r\n          'http://127.0.0.1:8000/get_crypto_name/'\r\n        );\r\n\r\n        let cryptoNames = response.data.detail;\r\n\r\n        let localStorageItem: string[] = [];\r\n        for (let i = 0; i < localStorage.length; i++) {\r\n          let key = localStorage.key(i);\r\n          if (key !== null) {\r\n            let value = localStorage.getItem(key);\r\n            if (value !== null) {\r\n              let item = JSON.parse(value);\r\n              localStorageItem.push(item.name);\r\n            }\r\n          }\r\n        }\r\n\r\n        // 로컬 스토리지의 값에 있는(체결되지 않은) 화폐는 true로, 아니라면 false로 선언\r\n        let isWaitingTemp = cryptoNames.reduce((obj: { [obj: string]: boolean; }, name: string) => {\r\n          if (localStorageItem.includes(name)) {\r\n            obj[name] = true;\r\n          }\r\n          else {\r\n            obj[name] = false;\r\n          }\r\n          return obj;\r\n        }, {})\r\n\r\n        dispatch(setIsBuying(isWaitingTemp));\r\n        dispatch(setIsSelling(isWaitingTemp));\r\n        localStorage.setItem(`${logInEmail}_IsBuying`, JSON.stringify(isWaitingTemp));\r\n        localStorage.setItem(`${logInEmail}_IsSelling`, JSON.stringify(isWaitingTemp));\r\n      } catch (error) {\r\n        console.log(\"화폐명 받아오기 실패\", error);\r\n      }\r\n    })();\r\n  }\r\n\r\n  // 모든 화폐의 마켓을 받아옴\r\n  const getCryptoMarket = (logInEmail: string) => {\r\n    (async () => {\r\n      try {\r\n        const response = await axios.get(\r\n          'http://127.0.0.1:8000/get_crypto_market/'\r\n        );\r\n\r\n        let cryptoMarkets = response.data.markets;\r\n\r\n        let localStorageItem: string[] = [];\r\n        for (let i = 0; i < localStorage.length; i++) {\r\n          let key = localStorage.key(i);\r\n          if (key !== null) {\r\n            let value = localStorage.getItem(key);\r\n            if (value !== null) {\r\n              let item = JSON.parse(value);\r\n              localStorageItem.push(item.market);\r\n            }\r\n          }\r\n        }\r\n\r\n        // 로컬 스토리지의 값에 있는(체결되지 않은) 화폐는 true로, 아니라면 false로 선언\r\n        let isBuyingTemp = cryptoMarkets.reduce((obj: { [obj: string]: boolean; }, market: string) => {\r\n          if (localStorageItem.includes(market)) {\r\n            obj[market] = true;\r\n          }\r\n          else {\r\n            obj[market] = false;\r\n          }\r\n          return obj;\r\n        }, {})\r\n\r\n        dispatch(setIsBuying(isBuyingTemp));\r\n        localStorage.setItem(`${logInEmail}_IsBuying`, JSON.stringify(isBuyingTemp))\r\n      } catch (error) {\r\n        console.log(\"화폐명 받아오기 실패\", error);\r\n      }\r\n    })();\r\n  }\r\n\r\n  // 선택된 화폐에 대한 호가내역 호출\r\n  const selectAskingPrice = (market: string) => {\r\n    (async (market) => {\r\n      try {\r\n        const response = await axios.post(\r\n          \"http://127.0.0.1:8000/asking_price/\",\r\n          {\r\n            market: market,\r\n          },\r\n          {\r\n            headers: {\r\n              \"Content-Type\": \"application/json\",\r\n            },\r\n          }\r\n        );\r\n\r\n        // console.log(\"호가내역 : \", response.data[0].orderbook_units);\r\n        dispatch(setAsking_data(response.data[0].orderbook_units));\r\n        dispatch(setAsking_dateTime(response.data[0].timestamp));\r\n        dispatch(setAsking_totalAskSize(response.data[0].total_ask_size));\r\n        dispatch(setAsking_totalBidSize(response.data[0].total_bid_size));\r\n      } catch (error) {\r\n        console.error(\"호가내역 전송 실패\", error);\r\n      }\r\n    })(market);\r\n  };\r\n\r\n  // 미체결 화폐에 대한 호가내역 호출\r\n  const selectAskingPrice_unSigned = (market: string) => {\r\n    (async (market) => {\r\n      try {\r\n        const response = await axios.post(\r\n          \"http://127.0.0.1:8000/asking_price/\",\r\n          {\r\n            market: market,\r\n          },\r\n          {\r\n            headers: {\r\n              \"Content-Type\": \"application/json\",\r\n            },\r\n          }\r\n        );\r\n\r\n        // console.log(\"호가내역-미체결 : \", response.data[0]);\r\n\r\n        let tempState = response.data[0].orderbook_units.map((item: { ask_price: number; bid_price: number; }) => ({\r\n          ask_price: item.ask_price,\r\n          bid_price: item.bid_price\r\n        }));\r\n\r\n        // dispatch(setAskingData_unSigned({ market: response.data[0].market, data: tempState }));\r\n\r\n        // 마켓명에 대응하는 화폐명을 찾음\r\n        let isCorresponed = filteredData.find(item => item.market === response.data[0].market);\r\n        let marketName = isCorresponed ? isCorresponed.name : null;\r\n\r\n        // 마켓명이 아닌 화폐명을 키로 지정\r\n        if (marketName) {\r\n          dispatch(setAskingData_unSigned({ market: marketName, data: tempState }));\r\n        }\r\n\r\n        // console.log(\"미체결 호가값 : \", askingData_unSigned);\r\n      } catch (error) {\r\n        console.error(\"호가내역-미체결 전송 실패\", error);\r\n      }\r\n    })(market);\r\n  };\r\n\r\n  // 호가와 구매가가 일치하지 않을 때\r\n  const buyCrypto_unSigned = (key: string, email: string, cryptoName: string, cryptoQuantity: number, buyTotal: number) => {\r\n    (async (key, email, cryptoName, cryptoQuantity, buyTotal) => {\r\n      try {\r\n        const response = await axios.post(\"http://127.0.0.1:8000/buy_crypto_unSigned/\", {\r\n          key: key,\r\n          email: email,\r\n          crypto_name: cryptoName,\r\n          crypto_quantity: cryptoQuantity,\r\n          buy_total: buyTotal,\r\n        });\r\n        console.log(\"구매 화폐 전송 성공\", response.data);\r\n        getBalance(logInEmail);  // 매수에 사용한 금액만큼 차감되기 때문에 잔고 업데이트\r\n        getOwnedCrypto(logInEmail);  // 소유 화폐가 새로 추가될 수 있으니 업데이트\r\n        getTradeHistory(logInEmail)  // 매수에 성공했으니 거래내역 업데이트\r\n        localStorage.removeItem(key)\r\n      } catch (error) {\r\n        console.log(\"구매 화폐 전송 실패: \", error)\r\n      }\r\n    })(key, email, cryptoName, cryptoQuantity, buyTotal);\r\n  }\r\n\r\n  const sellCrypto_unSigned = (key: string, email: string, cryptoName: string, cryptoQuantity: number, sellTotal: number) => {\r\n    (async (key, email, cryptoName, cryptoQuantity, sellTotal) => {\r\n      try {\r\n        const response = await axios.post(\"http://127.0.0.1:8000/sell_crypto_unSigned/\", {\r\n          key: key,\r\n          email: email,\r\n          crypto_name: cryptoName,\r\n          crypto_quantity: cryptoQuantity,\r\n          sell_total: sellTotal,\r\n        });\r\n        console.log(\"매도 화폐 전송 성공\", response.data);\r\n        getBalance(logInEmail);  // 매수에 사용한 금액만큼 차감되기 때문에 잔고 업데이트\r\n        getOwnedCrypto(logInEmail);  // 소유 화폐가 새로 추가될 수 있으니 업데이트\r\n        getTradeHistory(logInEmail)  // 매수에 성공했으니 거래내역 업데이트\r\n        localStorage.removeItem(key)\r\n      } catch (error) {\r\n        console.log(\"매도 화폐 전송 실패: \", error)\r\n      }\r\n    })(key, email, cryptoName, cryptoQuantity, sellTotal);\r\n  }\r\n\r\n  const themeChange = () => {\r\n\r\n    dispatch(setTheme(!theme));\r\n    let generalTheme = document.querySelectorAll(\".lightMode, .darkMode\");\r\n    let titleTheme = document.querySelectorAll(\r\n      \".lightMode-title, .darkMode-title\"\r\n    );\r\n    let titleImgTheme = document.querySelectorAll(\r\n      \".title-img-light, .title-img-dark\"\r\n    );\r\n    let hoverTheme = document.querySelectorAll(\r\n      \".hover-lightMode, .hover-darkMode\"\r\n    );\r\n\r\n    // 라이트모드 <-> 다크모드 순회\r\n    generalTheme.forEach((element) => {\r\n      if (!theme) {\r\n        element.classList.remove(\"lightMode\");\r\n        element.classList.add(\"darkMode\");\r\n      } else {\r\n        element.classList.remove(\"darkMode\");\r\n        element.classList.add(\"lightMode\");\r\n      }\r\n    });\r\n\r\n    titleTheme.forEach((element) => {\r\n      if (!theme) {\r\n        element.classList.remove(\"lightMode-title\");\r\n        element.classList.add(\"darkMode-title\");\r\n      } else {\r\n        element.classList.remove(\"darkMode-title\");\r\n        element.classList.add(\"lightMode-title\");\r\n      }\r\n    });\r\n\r\n    titleImgTheme.forEach((element) => {\r\n      if (!theme) {\r\n        element.classList.remove(\"title-img-light\");\r\n        element.classList.add(\"title-img-dark\");\r\n      } else {\r\n        element.classList.remove(\"title-img-dark\");\r\n        element.classList.add(\"title-img-light\");\r\n      }\r\n    });\r\n\r\n    hoverTheme.forEach((element) => {\r\n      if (!theme) {\r\n        element.classList.remove(\"hover-lightMode\");\r\n        element.classList.add(\"hover-darkMode\");\r\n      } else {\r\n        element.classList.remove(\"hover-darkMode\");\r\n        element.classList.add(\"hover-lightMode\");\r\n      }\r\n    });\r\n  };\r\n\r\n  return { getBalance, getOwnedCrypto, addTradeHistory, getTradeHistory, getCryptoName, selectAskingPrice, selectAskingPrice_unSigned, buyCrypto_unSigned, sellCrypto_unSigned, themeChange };\r\n\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}