{"ast":null,"code":"import _toConsumableArray from\"C:/VS_Project/JeayBit/client/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";import _regeneratorRuntime from\"C:/VS_Project/JeayBit/client/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";import _asyncToGenerator from\"C:/VS_Project/JeayBit/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import _slicedToArray from\"C:/VS_Project/JeayBit/client/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import{useDispatch,useSelector}from\"react-redux\";import{setFilteredData,setStar,setCr_name_selected,setCr_market_selected,setSortedData,setCandle_per_date,setCandle_per_week,setCandle_per_month,setCandle_per_minute,setCr_name,setCr_price,setCr_market,setCr_change,setCr_change_rate,setCr_change_price,setCr_trade_price,setCr_trade_volume,setCr_open_price,setCr_high_price,setCr_low_price,setCandle_per_date_BTC,setClosed_data,setCr_selected,setFavoriteCrypto,setBuyingPrice,setLogInEmail,setLogInUser,setSellingPrice}from\"../store\";import{useEffect,useState}from\"react\";import img_sort from\"../assets/images/sort.png\";import img_sort_up from\"../assets/images/sort-up.png\";import img_sort_down from\"../assets/images/sort-down.png\";import starOn from\"../assets/images/star-on.png\";import starOff from\"../assets/images/star-off.png\";import SimpleBar from\"simplebar-react\";import\"simplebar/dist/simplebar.min.css\";import axios from\"axios\";import useFunction from\"./useFuction\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";var CryptoList=function CryptoList(){var dispatch=useDispatch();var cr_name=useSelector(function(state){return state.cr_name;});var cr_price=useSelector(function(state){return state.cr_price;});var cr_market=useSelector(function(state){return state.cr_market;});var cr_change=useSelector(function(state){return state.cr_change;});var cr_change_rate=useSelector(function(state){return state.cr_change_rate;});var cr_change_price=useSelector(function(state){return state.cr_change_price;});var cr_trade_price=useSelector(function(state){return state.cr_trade_price;});var cr_trade_volume=useSelector(function(state){return state.cr_trade_volume;});var cr_open_price=useSelector(function(state){return state.cr_open_price;});var cr_high_price=useSelector(function(state){return state.cr_high_price;});var cr_low_price=useSelector(function(state){return state.cr_low_price;});var star=useSelector(function(state){return state.star;});var filteredData=useSelector(function(state){return state.filteredData;});var cr_market_selected=useSelector(function(state){return state.cr_market_selected;});// 검색값을 관리하기 위한 state\nvar _useState=useState(\"\"),_useState2=_slicedToArray(_useState,2),search_cr=_useState2[0],setSearch_cr=_useState2[1];// 차례로 화폐명, 현재가, 전일대비, 거래대금의 정렬 상태를 관리\nvar _useState3=useState([0,0,0,0]),_useState4=_slicedToArray(_useState3,2),sort_states=_useState4[0],setSort_states=_useState4[1];// 정렬하려는 목적에 따라 이미지를 변경하기 위해 배열로 생성\nvar sort_images=[img_sort,img_sort_down,img_sort_up];var selectedChartSort=useSelector(function(state){return state.selectedChartSort;});var chartSortTime=useSelector(function(state){return state.chartSortTime;});var chartSortDate=useSelector(function(state){return state.chartSortDate;});var ownedCrypto=useSelector(function(state){return state.ownedCrypto;});var isBuying=useSelector(function(state){return state.isBuying;});var _useState5=useState(),_useState6=_slicedToArray(_useState5,2),selectedCrypto=_useState6[0],setSelectedCrypto=_useState6[1];var _useState7=useState(),_useState8=_slicedToArray(_useState7,2),userSelectedCrypto=_useState8[0],setUserSelectedCrypto=_useState8[1];var logInEmail=useSelector(function(state){return state.logInEmail;});var favoriteCrypto=useSelector(function(state){return state.favoriteCrypto;});var _useState9=useState(false),_useState10=_slicedToArray(_useState9,2),isFavorited=_useState10[0],setIsFavorited=_useState10[1];var _useState11=useState(\"원화\"),_useState12=_slicedToArray(_useState11,2),listCategory=_useState12[0],setListCategory=_useState12[1];// 화폐 가격을 업데이트 하기 전에 해당 state에 담음\nvar _useState13=useState(),_useState14=_slicedToArray(_useState13,2),prevData=_useState14[0],setPrevData=_useState14[1];// 이전 화폐 가격과 현재 화폐 가격을 비교하여 변화가 발생한 화폐를 저장할 state\nvar _useState15=useState([]),_useState16=_slicedToArray(_useState15,2),differences=_useState16[0],setDifferences=_useState16[1];var _useFunction=useFunction(),getOwnedCrypto=_useFunction.getOwnedCrypto,getTradeHistory=_useFunction.getTradeHistory,selectAskingPrice=_useFunction.selectAskingPrice,getCryptoName=_useFunction.getCryptoName,selectAskingPrice_unSigned=_useFunction.selectAskingPrice_unSigned;var getAskingPrice_unSigned=function getAskingPrice_unSigned(){// Object.entries = 객체를 [key, value]쌍의 배열로 변환 \nvar unSignedCrypto=Object.entries(isBuying).filter(function(_ref){var _ref2=_slicedToArray(_ref,2),key=_ref2[0],value=_ref2[1];return value===true;}).map(function(_ref3){var _ref4=_slicedToArray(_ref3,2),key=_ref4[0],value=_ref4[1];return key;});// 마켓명으로 요청을 보내야 하기 때문에, 화폐명을 마켓명으로 변경\nvar unSignedMarket=unSignedCrypto.map(function(name){var isCorresponed=filteredData.find(function(isCorresponed){return isCorresponed.name===name;});return isCorresponed?isCorresponed.market:null;});for(var i=0;i<unSignedMarket.length;i++){if(unSignedMarket[i]){selectAskingPrice_unSigned(unSignedMarket[i]);}}return unSignedMarket;};useEffect(function(){// const 변수 = setInterval(() => { 콜백함수, 시간 })\n// fetchData 함수를 1초마다 실행 - 서버에서 받아오는 값을 1초마다 갱신시킴\nvar interval=setInterval(function(){fetchData();},1000);initialData();// clearInterval(변수)\n// setInterval이 반환하는 interval ID를 clearInterval 함수로 제거\nreturn function(){return clearInterval(interval);};},[]);// 별 이미지를 클릭할 때마다 서버로부터 관심 화폐에 대한 정보 받아옴\nuseEffect(function(){if(logInEmail!==''){getFavoriteCrypto(logInEmail);}},[isFavorited]);// 화면에 보여질 초기 화폐의 차트(비트코인)\nvar initialData=/*#__PURE__*/function(){var _ref5=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(){var response;return _regeneratorRuntime().wrap(function _callee$(_context){while(1)switch(_context.prev=_context.next){case 0:_context.prev=0;_context.next=3;return axios.get(\"http://127.0.0.1:8000/get_data/\");case 3:response=_context.sent;dispatch(setCandle_per_date_BTC(response.data.candle_btc_date));dispatch(setCr_market_selected(response.data.market[0]));dispatch(setCr_name_selected(response.data.name[0]));_context.next=12;break;case 9:_context.prev=9;_context.t0=_context[\"catch\"](0);console.error(_context.t0);case 12:case\"end\":return _context.stop();}},_callee,null,[[0,9]]);}));return function initialData(){return _ref5.apply(this,arguments);};}();// 비동기 함수 async를 이용하여 데이터를 받아오는 동안에도 다른 작업을 가능하게 함\n// = async function () {}\nvar fetchData=/*#__PURE__*/function(){var _ref6=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2(){var response;return _regeneratorRuntime().wrap(function _callee2$(_context2){while(1)switch(_context2.prev=_context2.next){case 0:_context2.prev=0;_context2.next=3;return axios.get(\"http://127.0.0.1:8000/get_data/\");case 3:response=_context2.sent;dispatch(setCr_name(response.data.name));dispatch(setCr_price(response.data.price));dispatch(setCr_market(response.data.market));dispatch(setCr_change(response.data.change));dispatch(setCr_change_rate(response.data.change_rate));dispatch(setCr_change_price(response.data.change_price));dispatch(setCr_trade_price(response.data.trade_price));dispatch(setCr_trade_volume(response.data.trade_volume));dispatch(setCr_open_price(response.data.open_price));dispatch(setCr_high_price(response.data.high_price));dispatch(setCr_low_price(response.data.low_price));_context2.next=20;break;case 17:_context2.prev=17;_context2.t0=_context2[\"catch\"](0);console.error(_context2.t0);case 20:case\"end\":return _context2.stop();}},_callee2,null,[[0,17]]);}));return function fetchData(){return _ref6.apply(this,arguments);};}();// 필터링 및 정렬된 데이터를 새로운 배열로 생성 -> setFilteredData로 상태를 업데이트\n// price = 숫자형, f_price = 문자형 / 숫자형으로 정렬, 문자형으로 출력\nvar updatedData=cr_name.map(function(name,i){return{name:name,price:cr_price[i],market:cr_market[i],change:cr_change[i],change_rate:cr_change_rate[i],change_price:cr_change_price[i],trade_price:cr_trade_price[i],trade_volume:cr_trade_volume[i],open_price:cr_open_price[i],high_price:cr_high_price[i],low_price:cr_low_price[i],star:star[i]// 검색어에 해당하는 데이터를 비교하여 배열을 재생성\n};}).filter(function(item){return item.name.toLowerCase().includes(search_cr.toLowerCase());});// useEffect(() => {\n//   if (filteredData.length === 0 && updatedData.length > 0) {\n//     dispatch(setFilteredData(updatedData));\n//   }\n// });\nconsole.log();// 화폐 가격의 변화를 감지하고 이전 값과 비교하여 변화가 생긴 값을 상태에 업데이트\nuseEffect(function(){setPrevData(cr_price);// state의 업데이트는 비동기적이기 때문에 값이 즉시 바뀌지 않음. 그러므로 이 useEffect() 안에서 prevData는 아직 이전의 값을 가지고 있기 때문에 cr_price와 prevData는 다른 값을 가짐. (cr_price = 현재값, prevData = 이전값)\nvar newDifferences=[];// 화폐 리스트가 변할 때마다 변화 이전 값과 현재 값을 비교\nif(prevData!==undefined){prevData.forEach(function(value,index){if(value!==cr_price[index]){newDifferences.push({index:index,oldValue:value,newValue:cr_price[index]});}});}setDifferences(newDifferences);// 별도로 선택한 화폐가 있을 때\nif(selectedCrypto){var newSelectedCrypto=filteredData.find(function(crypto){return crypto.name===selectedCrypto.name;});if(newSelectedCrypto){setSelectedCrypto(newSelectedCrypto);setUserSelectedCrypto(newSelectedCrypto);dispatch(setCr_selected(newSelectedCrypto));}// 호가 및 체결내역 호출\nselectClosedPrice(selectedCrypto.market);selectAskingPrice(selectedCrypto.market);getAskingPrice_unSigned();}// 선택한 화폐가 없을 때(비트코인의 정보 출력)\nelse{if(filteredData.length>0){var initial_newSelectedCrypto=filteredData[0];if(initial_newSelectedCrypto){setSelectedCrypto(initial_newSelectedCrypto);// 해당 코드 때문에 '비트코인'이 강제 선택됨. 즉, if문 조건 성립\ndispatch(setCr_selected(initial_newSelectedCrypto));dispatch(setBuyingPrice(initial_newSelectedCrypto.price));dispatch(setSellingPrice(initial_newSelectedCrypto.price));}}}// 차트에 실시간 데이터를 전달(시간당)\nif(filteredData.length>0&&selectedCrypto){if(selectedCrypto.name&&selectedCrypto.market===\"KRW-BTC\"){selectMarket_time(cr_market_selected,chartSortTime);}else{selectMarket_time(cr_market_selected,chartSortTime);}}},[filteredData]);// 리스트에 있는 화폐 검색시 업데이트\nuseEffect(function(){// fetchData();\ndispatch(setFilteredData(updatedData));},[search_cr,cr_price]);useEffect(function(){if(cr_market_selected){selectMarket_date(cr_market_selected);// selectMarket_time(cr_market_selected, chartSortTime);\n}},[cr_market_selected,chartSortDate,chartSortTime]);// 화면이 첫 렌더링 될 때마다 \nuseEffect(function(){var userItem=localStorage.getItem('user');if(userItem!==null){var user=JSON.parse(userItem);if(user){dispatch(setLogInUser(user.username));dispatch(setLogInEmail(user.email));getFavoriteCrypto(user.email);getOwnedCrypto(user.email);getTradeHistory(user.email);getCryptoName(user.email);getAskingPrice_unSigned();}}},[]);// 선택된 화폐에 대한 체결내역 호출\nvar selectClosedPrice=function selectClosedPrice(market){(function(){var _ref7=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee3(market){var response;return _regeneratorRuntime().wrap(function _callee3$(_context3){while(1)switch(_context3.prev=_context3.next){case 0:_context3.prev=0;_context3.next=3;return axios.post(\"http://127.0.0.1:8000/closed_price/\",{market:market},{headers:{\"Content-Type\":\"application/json\"}});case 3:response=_context3.sent;// console.log(\"체결내역 : \", response.data);\ndispatch(setClosed_data(response.data));_context3.next=10;break;case 7:_context3.prev=7;_context3.t0=_context3[\"catch\"](0);console.error(\"Failed to send data to Django server\",_context3.t0);case 10:case\"end\":return _context3.stop();}},_callee3,null,[[0,7]]);}));return function(_x){return _ref7.apply(this,arguments);};})()(market);};// 리스트에서 화폐를 선택하면 해당 화폐에 대한 캔들 호출(차트의 분에 따라)\nvar selectMarket_time=function selectMarket_time(market,minute){(function(){var _ref8=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee4(market,minute){var response;return _regeneratorRuntime().wrap(function _callee4$(_context4){while(1)switch(_context4.prev=_context4.next){case 0:if(!(minute!=='')){_context4.next=11;break;}_context4.prev=1;_context4.next=4;return axios.post(\"http://127.0.0.1:8000/candle_per_minute/\",{market:market,minute:minute},{headers:{\"Content-Type\":\"application/json\"}});case 4:response=_context4.sent;// console.log(chartSortTime, \"당 요청값: \", response.data);\ndispatch(setCandle_per_minute(response.data));_context4.next=11;break;case 8:_context4.prev=8;_context4.t0=_context4[\"catch\"](1);console.error(\"Failed to send data to Django server\",_context4.t0);case 11:case\"end\":return _context4.stop();}},_callee4,null,[[1,8]]);}));return function(_x2,_x3){return _ref8.apply(this,arguments);};})()(market,minute);};// 리스트에서 화폐를 선택하면 해당 화폐에 대한 캔들 호출(차트의 일자에 따라)\nvar selectMarket_date=function selectMarket_date(market){if(chartSortDate===\"1일\"){(function(){var _ref9=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee5(market){var response;return _regeneratorRuntime().wrap(function _callee5$(_context5){while(1)switch(_context5.prev=_context5.next){case 0:_context5.prev=0;_context5.next=3;return axios.post(\"http://127.0.0.1:8000/candle_per_date/\",{market:market// date: tempChartSort,\n},{headers:{\"Content-Type\":\"application/json\"}});case 3:response=_context5.sent;// console.log(\"1일 요청된 값 : \", response.data)\ndispatch(setCandle_per_date(response.data));_context5.next=10;break;case 7:_context5.prev=7;_context5.t0=_context5[\"catch\"](0);console.error(\"Failed to send data to Django server\",_context5.t0);case 10:case\"end\":return _context5.stop();}},_callee5,null,[[0,7]]);}));return function(_x4){return _ref9.apply(this,arguments);};})()(market);}else if(chartSortDate===\"1주\"){void function(){var _ref10=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee6(market){var response;return _regeneratorRuntime().wrap(function _callee6$(_context6){while(1)switch(_context6.prev=_context6.next){case 0:_context6.prev=0;_context6.next=3;return axios.post(\"http://127.0.0.1:8000/candle_per_week/\",{market:market},{headers:{\"Content-Type\":\"application/json\"}});case 3:response=_context6.sent;// console.log(\"1주 요청된 값 : \", response.data)\ndispatch(setCandle_per_week(response.data));_context6.next=10;break;case 7:_context6.prev=7;_context6.t0=_context6[\"catch\"](0);console.error(\"Failed to send data to Django server\",_context6.t0);case 10:case\"end\":return _context6.stop();}},_callee6,null,[[0,7]]);}));return function(_x5){return _ref10.apply(this,arguments);};}()(market);}else if(chartSortDate===\"1개월\"){void function(){var _ref11=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee7(market){var response;return _regeneratorRuntime().wrap(function _callee7$(_context7){while(1)switch(_context7.prev=_context7.next){case 0:_context7.prev=0;_context7.next=3;return axios.post(\"http://127.0.0.1:8000/candle_per_month/\",{market:market},{headers:{\"Content-Type\":\"application/json\"}});case 3:response=_context7.sent;// console.log(\"1개월 요청된 값 : \", response.data)\ndispatch(setCandle_per_month(response.data));_context7.next=10;break;case 7:_context7.prev=7;_context7.t0=_context7[\"catch\"](0);console.error(\"Failed to send data to Django server\",_context7.t0);case 10:case\"end\":return _context7.stop();}},_callee7,null,[[0,7]]);}));return function(_x6){return _ref11.apply(this,arguments);};}()(market);}};// 별 이미지를 클릭하면 on off\nvar starClick=function starClick(index){dispatch(setStar(index));setIsFavorited(!isFavorited);};// 로그인한 사용자에 대해 관심 화폐를 업데이트\nvar addCryptoToUser=function addCryptoToUser(email,cryptoName){if(logInEmail!==\"\"){(function(){var _ref12=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee8(email,cryptoName){return _regeneratorRuntime().wrap(function _callee8$(_context8){while(1)switch(_context8.prev=_context8.next){case 0:try{axios.post(\"http://127.0.0.1:8000/add_favoriteCrypto_to_user/\",{email:email,crypto_name:cryptoName});}catch(error){console.log(\"관심 화폐 정보 전송 실패\");}case 1:case\"end\":return _context8.stop();}},_callee8);}));return function(_x7,_x8){return _ref12.apply(this,arguments);};})()(email,cryptoName);}else{alert(\"사용자 존재X\");}};// 로그인한 사용자에 대한 관심 화폐 정보를 받아옴\nvar getFavoriteCrypto=function getFavoriteCrypto(logInEmail){_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee9(){var response;return _regeneratorRuntime().wrap(function _callee9$(_context9){while(1)switch(_context9.prev=_context9.next){case 0:_context9.prev=0;_context9.next=3;return axios.get(\"http://127.0.0.1:8000/get_user_favoriteCrypto/\".concat(logInEmail,\"/\"));case 3:response=_context9.sent;console.log(\"반환값-관심화폐 : \",response.data);dispatch(setFavoriteCrypto(response.data));_context9.next=11;break;case 8:_context9.prev=8;_context9.t0=_context9[\"catch\"](0);console.log(_context9.t0);case 11:case\"end\":return _context9.stop();}},_callee9,null,[[0,8]]);}))();};// 정렬 이미지 클릭 이벤트\nvar sortClick=function sortClick(index){// 정렬 이미지 순환\nsetSort_states(function(prevStates){var states_copy=_toConsumableArray(prevStates);states_copy[index]=(states_copy[index]+1)%sort_images.length;var sortedData=_toConsumableArray(filteredData);// 화폐를 전일대비 상승/동결/하락 여부에 따라 구분\n// 값 자체에 양수, 음수 구분이 되어있는 것이 아니기 때문에 정렬하기 전에 구분을 지어줘야 함\nvar rise_crypto=[];var even_crypto=[];var fall_crypto=[];// 상승/동결/하락 여부에 따라 구분하여 새 배열 생성\nsortedData.forEach(function(item){rise_crypto=sortedData.filter(function(item){return item.change===\"RISE\";});even_crypto=sortedData.filter(function(item){return item.change===\"EVEN\";});fall_crypto=sortedData.filter(function(item){return item.change===\"FALL\";});});switch(index){// 화폐 이름순 정렬\ncase 0:if(states_copy[index]===0){states_copy[index]=1;}if(states_copy[index]===1){sortedData.sort(function(a,b){return a.name.localeCompare(b.name);});// dispatch(setFilteredData(sortedData));\nsort_states[1]=0;sort_states[2]=0;sort_states[3]=0;}if(states_copy[index]===2){sortedData.sort(function(a,b){return b.name.localeCompare(a.name);});// dispatch(setFilteredData(sortedData));\nsort_states[1]=0;sort_states[2]=0;sort_states[3]=0;}break;// 화폐 가격순 정렬\ncase 1:if(states_copy[index]===0){states_copy[index]=1;}if(states_copy[index]===1){sortedData.sort(function(a,b){return b.price-a.price;});// dispatch(setFilteredData(sortedData));\nsort_states[0]=0;sort_states[2]=0;sort_states[3]=0;}if(states_copy[index]===2){sortedData.sort(function(a,b){return a.price-b.price;});// dispatch(setFilteredData(sortedData));\nsort_states[0]=0;sort_states[2]=0;sort_states[3]=0;}break;// 화폐 전일대비 변화순 정렬\ncase 2:if(states_copy[index]===0){states_copy[index]=1;}if(states_copy[index]===1){rise_crypto.sort(function(a,b){return b.change_rate-a.change_rate;});even_crypto.sort(function(a,b){return b.change_rate-a.change_rate;});fall_crypto.sort(function(a,b){return a.change_rate-b.change_rate;});// 새 배열을 원본 배열의 카피본에 병합 - 내림차순이기 때문에 상승, 동결, 하락순으로 병합\nsortedData=[].concat(_toConsumableArray(rise_crypto),_toConsumableArray(even_crypto),_toConsumableArray(fall_crypto));// dispatch(setFilteredData(sortedData));\nsort_states[0]=0;sort_states[1]=0;sort_states[3]=0;}if(states_copy[index]===2){fall_crypto.sort(function(a,b){return b.change_rate-a.change_rate;});even_crypto.sort(function(a,b){return b.change_rate-a.change_rate;});rise_crypto.sort(function(a,b){return a.change_rate-b.change_rate;});// 새 배열을 원본 배열의 카피본에 병합 - 오름차순이기 때문에 하락, 동결, 상승순으로 병합\nsortedData=[].concat(_toConsumableArray(fall_crypto),_toConsumableArray(even_crypto),_toConsumableArray(rise_crypto));// dispatch(setFilteredData(sortedData));\nsort_states[0]=0;sort_states[1]=0;sort_states[3]=0;}break;// 거래대금순 정렬\ncase 3:if(states_copy[index]===0){states_copy[index]=1;}if(states_copy[index]===1){sortedData.sort(function(a,b){return b.trade_price-a.trade_price;});// dispatch(setFilteredData(sortedData));\nsort_states[0]=0;sort_states[1]=0;sort_states[2]=0;}if(states_copy[index]===2){sortedData.sort(function(a,b){return a.trade_price-b.trade_price;});// dispatch(setFilteredData(sortedData));\nsort_states[0]=0;sort_states[1]=0;sort_states[2]=0;}break;}dispatch(setFilteredData(sortedData));dispatch(setSortedData(sortedData));return states_copy;});};// 각 값들을 테이블에서 클릭한 화폐의 정보로 변경\nvar nameSelect=function nameSelect(value){dispatch(setCr_name_selected(value));};var marketSelect=function marketSelect(value){dispatch(setCr_market_selected(value));};return/*#__PURE__*/_jsxs(\"div\",{className:\"lightMode\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"list-search lightMode\",children:[/*#__PURE__*/_jsx(\"svg\",{className:\"img-search\",xmlns:\"http://www.w3.org/2000/svg\",viewBox:\"0 0 18 18\",width:\"30\",height:\"30\",children:/*#__PURE__*/_jsx(\"path\",{fill:\"currentColor\",d:\"M3.5 8a4.5 4.5 0 1 1 9 0 4.5 4.5 0 0 1-9 0ZM8 2a6 6 0 1 0 3.65 10.76l3.58 3.58 1.06-1.06-3.57-3.57A6 6 0 0 0 8 2Z\"})}),/*#__PURE__*/_jsx(\"input\",{type:\"text\",className:\"crypto-search lightMode\",placeholder:\"\\uAC80\\uC0C9\",value:search_cr,onChange:function onChange(e){return setSearch_cr(e.target.value);}})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"list-category\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"\".concat(listCategory===\"원화\"?\"list-category-clicked\":\"\"),onClick:function onClick(){return setListCategory(\"원화\");},children:\"\\uC6D0\\uD654\"}),/*#__PURE__*/_jsx(\"span\",{className:\"\".concat(listCategory===\"보유\"?\"list-category-clicked\":\"\"),onClick:function onClick(){return setListCategory(\"보유\");},children:\"\\uBCF4\\uC720\"}),/*#__PURE__*/_jsx(\"span\",{className:\"\".concat(listCategory===\"관심\"?\"list-category-clicked\":\"\"),onClick:function onClick(){return setListCategory(\"관심\");},children:\"\\uAD00\\uC2EC\"})]}),/*#__PURE__*/_jsxs(\"table\",{className:\"list-table\",id:\"listHead\",children:[/*#__PURE__*/_jsxs(\"colgroup\",{children:[/*#__PURE__*/_jsx(\"col\",{width:150}),/*#__PURE__*/_jsx(\"col\",{width:90}),/*#__PURE__*/_jsx(\"col\",{width:90}),/*#__PURE__*/_jsx(\"col\",{width:90})]}),/*#__PURE__*/_jsx(\"thead\",{className:\"list-thead lightMode\",children:/*#__PURE__*/_jsx(\"tr\",{className:\"lightMode-title\",children:listCategory!=='보유'?/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsxs(\"th\",{className:\"name\",onClick:function onClick(){return sortClick(0);},children:[\"\\uD654\\uD3D0\\uBA85\\xA0\",/*#__PURE__*/_jsx(\"img\",{className:\"sort\",src:sort_images[sort_states[0]],alt:\"\\uD654\\uD3D0\\uBA85\"})]}),/*#__PURE__*/_jsxs(\"th\",{className:\"price\",onClick:function onClick(){return sortClick(1);},children:[\"\\uD604\\uC7AC\\uAC00\\xA0\",/*#__PURE__*/_jsx(\"img\",{className:\"sort\",src:sort_images[sort_states[1]],alt:\"\\uD604\\uC7AC\\uAC00\"})]}),/*#__PURE__*/_jsxs(\"th\",{className:\"compare\",onClick:function onClick(){return sortClick(2);},children:[\"\\uC804\\uC77C\\uB300\\uBE44\\xA0\",/*#__PURE__*/_jsx(\"img\",{className:\"sort\",src:sort_images[sort_states[2]],alt:\"\\uC804\\uC77C\\uB300\\uBE44\"})]}),/*#__PURE__*/_jsxs(\"th\",{className:\"volume\",onClick:function onClick(){return sortClick(3);},children:[\"\\uAC70\\uB798\\uB300\\uAE08\\xA0\",/*#__PURE__*/_jsx(\"img\",{className:\"sort\",src:sort_images[sort_states[3]],alt:\"\\uAC70\\uB798\\uB300\\uAE08\"})]})]}):/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsxs(\"th\",{className:\"name\",id:\"owned-name\",onClick:function onClick(){return sortClick(0);},children:[\"\\uD654\\uD3D0\\uBA85\\xA0\",/*#__PURE__*/_jsx(\"img\",{className:\"sort\",src:sort_images[sort_states[0]],alt:\"\\uD654\\uD3D0\\uBA85\"})]}),/*#__PURE__*/_jsxs(\"th\",{className:\"price\",id:\"owned-price\",onClick:function onClick(){return sortClick(1);},children:[\"\\uD604\\uC7AC\\uAC00\\xA0\",/*#__PURE__*/_jsx(\"img\",{className:\"sort\",src:sort_images[sort_states[1]],alt:\"\\uD604\\uC7AC\\uAC00\"})]}),/*#__PURE__*/_jsxs(\"th\",{className:\"compare\",id:\"owned-compare\",onClick:function onClick(){return sortClick(2);},children:[\"\\uC804\\uC77C\\uB300\\uBE44\\xA0\",/*#__PURE__*/_jsx(\"img\",{className:\"sort\",src:sort_images[sort_states[2]],alt:\"\\uC804\\uC77C\\uB300\\uBE44\"})]}),/*#__PURE__*/_jsxs(\"th\",{className:\"volume\",id:\"owned-volume\",onClick:function onClick(){return sortClick(2);},children:[\"\\uBCF4\\uC720\\uC218\\uB7C9\\xA0\",/*#__PURE__*/_jsx(\"img\",{className:\"sort\",src:sort_images[sort_states[2]],alt:\"\\uBCF4\\uC720\\uC218\\uB7C9\"})]})]})})})]}),listCategory===\"원화\"?/*#__PURE__*/_jsx(SimpleBar,{className:\"scrollBar-listTable\",children:/*#__PURE__*/_jsxs(\"table\",{className:\"list-table\",children:[/*#__PURE__*/_jsxs(\"colgroup\",{children:[/*#__PURE__*/_jsx(\"col\",{width:150}),/*#__PURE__*/_jsx(\"col\",{width:90}),/*#__PURE__*/_jsx(\"col\",{width:90}),/*#__PURE__*/_jsx(\"col\",{width:90})]}),/*#__PURE__*/_jsx(\"tbody\",{className:\"scrollable-tbody\",children:filteredData.map(function(item,i){// 가격의 변화가 생긴 state를 테이블에서 찾아 해당 td 시각화\nvar isChanged=differences.some(function(diff,index){return diff.index===i&&diff.newValue===item.price;});var priceClass_rise=isChanged?\"change-price-rise\":\"\";var priceClass_fall=isChanged?\"change-price-fall\":\"\";// DB에서 가져온 관심화폐 목록과 일치하는 행을 찾음\nvar isFavorited=Array.isArray(favoriteCrypto)&&favoriteCrypto.some(function(diff,index){return item.name===diff.crypto_name;});return/*#__PURE__*/_jsxs(\"tr\",{onClick:function onClick(){dispatch(setBuyingPrice(filteredData[i].price));// 특정 화폐를 클릭하면 해당 화폐의 값으로 '매수가격'이 업데이트 됨\ndispatch(setSellingPrice(filteredData[i].price));// 특정 화폐를 클릭하면 해당 화폐의 값으로 '매도가격'이 업데이트 됨  \nnameSelect(filteredData[i].name);marketSelect(filteredData[i].market);setSelectedCrypto(filteredData[i]);selectMarket_date(filteredData[i].market);selectMarket_time(filteredData[i].market,selectedChartSort);selectAskingPrice(filteredData[i].market);selectClosedPrice(filteredData[i].market);},children:[/*#__PURE__*/_jsxs(\"td\",{className:\"td-name lightMode\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"span-star\",children:/*#__PURE__*/_jsx(\"img\",{onClick:function onClick(){starClick(i);addCryptoToUser(logInEmail,filteredData[i].name);}// 최초 star[i]의 상태는 'starOn'일 수가 없으므로 반드시 starOff 출력\n// src={star[i] === 'starOn' ? starOn : starOff}\n,src:isFavorited?starOn:starOff,alt:\"star\"})}),/*#__PURE__*/_jsxs(\"div\",{className:\"div-name\",children:[/*#__PURE__*/_jsx(\"div\",{children:item.name}),/*#__PURE__*/_jsx(\"div\",{children:item.market})]})]}),item.change===\"RISE\"?/*#__PURE__*/_jsx(\"td\",{className:\"lightMode\",children:/*#__PURE__*/_jsx(\"span\",{className:\"td-rise \".concat(priceClass_rise),children:item.price.toLocaleString()})}):item.change===\"FALL\"?/*#__PURE__*/_jsx(\"td\",{className:\"lightMode\",children:/*#__PURE__*/_jsx(\"span\",{className:\"td-fall \".concat(priceClass_fall),children:item.price.toLocaleString()})}):/*#__PURE__*/_jsx(\"td\",{className:\"lightMode\",children:/*#__PURE__*/_jsx(\"span\",{children:item.price.toLocaleString()})}),item.change===\"RISE\"?/*#__PURE__*/_jsx(\"td\",{className:\"lightMode\",children:/*#__PURE__*/_jsxs(\"span\",{className:\"td-rise\",children:[\"+\",(item.change_rate*100).toFixed(2),\"% \",/*#__PURE__*/_jsx(\"br\",{}),\" \",item.change_price.toLocaleString()]})}):item.change===\"FALL\"?/*#__PURE__*/_jsx(\"td\",{className:\"lightMode\",children:/*#__PURE__*/_jsxs(\"span\",{className:\"td-fall\",children:[\"-\",(item.change_rate*100).toFixed(2),\"% \",/*#__PURE__*/_jsx(\"br\",{}),\" \",item.change_price.toLocaleString()]})}):/*#__PURE__*/_jsx(\"td\",{className:\"lightMode\",children:/*#__PURE__*/_jsxs(\"span\",{children:[(item.change_rate*100).toFixed(2),\"% \",/*#__PURE__*/_jsx(\"br\",{}),\" \",item.change_price.toLocaleString()]})}),/*#__PURE__*/_jsx(\"td\",{className:\"lightMode\",children:/*#__PURE__*/_jsxs(\"span\",{className:\"td-volume\",children:[Number(String(Math.floor(item.trade_price)).slice(0,-6)).toLocaleString(),\"\\uBC31\\uB9CC\"]})})]},i);})})]})}):listCategory===\"보유\"?logInEmail!==\"\"?/*#__PURE__*/ // 보유 화폐 영역\n_jsx(SimpleBar,{className:\"scrollBar-listTable\",children:/*#__PURE__*/_jsxs(\"table\",{className:\"list-table\",children:[/*#__PURE__*/_jsxs(\"colgroup\",{children:[/*#__PURE__*/_jsx(\"col\",{width:150}),/*#__PURE__*/_jsx(\"col\",{width:90}),/*#__PURE__*/_jsx(\"col\",{width:90}),/*#__PURE__*/_jsx(\"col\",{width:90})]}),/*#__PURE__*/_jsx(\"tbody\",{className:\"scrollable-tbody\",children:filteredData.map(function(item,i){var _Number,_ownedCrypto$find;// 가격의 변화가 생긴 state를 테이블에서 찾아 해당 td 시각화\nvar isChanged=differences.some(function(diff,index){return diff.index===i&&diff.newValue===item.price;});var priceClass_rise=isChanged?\"change-price-rise\":\"\";var priceClass_fall=isChanged?\"change-price-fall\":\"\";// DB에서 가져온 보유화폐 목록과 일치하는 행을 찾음\nvar isOwned=Array.isArray(ownedCrypto)&&ownedCrypto.some(function(diff,index){return item.name===diff.crypto_name;});// 관심화폐는 시각화 해주기 위해 구분\nvar isFavorited=Array.isArray(favoriteCrypto)&&favoriteCrypto.some(function(diff,index){return item.name===diff.crypto_name;});// 인덱스 한 번당 소유화폐를 순회시켜서 일치하는 요소를 찾고, 찾지 못한다면 ?를 이용해서 undefined를 반환\nvar ownedQuantity=String((_Number=Number((_ownedCrypto$find=ownedCrypto.find(function(crypto){return item.name===crypto.crypto_name;}))===null||_ownedCrypto$find===void 0?void 0:_ownedCrypto$find.quantity))===null||_Number===void 0?void 0:_Number.toFixed(2));var ownedMarket=item.market.slice(4);var userOwnedQuantity=ownedQuantity+ownedMarket;// 전체 문자열의 길이가 12자리를 넘어갈 경우 12자리가 될 때 까지 마지막 인덱스 제거\nwhile(userOwnedQuantity.length>12){ownedQuantity=ownedQuantity.slice(0,-1);userOwnedQuantity=ownedQuantity+ownedMarket;}// 마지막 인덱스가 '.'일 경우 제거\nif(userOwnedQuantity.endsWith('.')){userOwnedQuantity=userOwnedQuantity.slice(0,-1);}return(// 보유화폐만 출력\nisOwned&&/*#__PURE__*/_jsxs(\"tr\",{onClick:function onClick(){dispatch(setBuyingPrice(filteredData[i].price));// 특정 화폐를 클릭하면 해당 화폐의 값으로 '매수가격'이 업데이트 됨\ndispatch(setSellingPrice(filteredData[i].price));// 특정 화폐를 클릭하면 해당 화폐의 값으로 '매더가격'이 업데이트 됨\nnameSelect(filteredData[i].name);marketSelect(filteredData[i].market);setSelectedCrypto(filteredData[i]);selectMarket_date(filteredData[i].market);selectMarket_time(filteredData[i].market,selectedChartSort);selectAskingPrice(filteredData[i].market);selectClosedPrice(filteredData[i].market);},children:[/*#__PURE__*/_jsxs(\"td\",{className:\"td-name lightMode\",id:\"owned-td-name\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"span-star\",children:/*#__PURE__*/_jsx(\"img\",{onClick:function onClick(){starClick(i);addCryptoToUser(logInEmail,filteredData[i].name);}// 최초 star[i]의 상태는 'starOn'일 수가 없으므로 반드시 starOff 출력\n// src={star[i] === 'starOn' ? starOn : starOff}\n,src:isFavorited?starOn:starOff,alt:\"star\"})}),/*#__PURE__*/_jsxs(\"div\",{className:\"div-name\",children:[/*#__PURE__*/_jsx(\"div\",{children:item.name}),/*#__PURE__*/_jsx(\"div\",{children:item.market})]})]}),item.change===\"RISE\"?/*#__PURE__*/_jsx(\"td\",{className:\"lightMode\",id:\"owned-td-price\",children:/*#__PURE__*/_jsx(\"span\",{className:\"td-rise \".concat(priceClass_rise),children:item.price.toLocaleString()})}):item.change===\"FALL\"?/*#__PURE__*/_jsx(\"td\",{className:\"lightMode\",id:\"owned-td-price\",children:/*#__PURE__*/_jsx(\"span\",{className:\"td-fall \".concat(priceClass_fall),children:item.price.toLocaleString()})}):/*#__PURE__*/_jsx(\"td\",{className:\"lightMode\",id:\"owned-td-price\",children:/*#__PURE__*/_jsx(\"span\",{children:item.price.toLocaleString()})}),item.change===\"RISE\"?/*#__PURE__*/_jsx(\"td\",{className:\"lightMode\",id:\"owned-td-changeRate\",children:/*#__PURE__*/_jsxs(\"span\",{className:\"td-rise\",children:[\"+\",(item.change_rate*100).toFixed(2),\"% \",/*#__PURE__*/_jsx(\"br\",{}),\" \",item.change_price.toLocaleString()]})}):item.change===\"FALL\"?/*#__PURE__*/_jsx(\"td\",{className:\"lightMode\",id:\"owned-td-changeRate\",children:/*#__PURE__*/_jsxs(\"span\",{className:\"td-fall\",children:[\"-\",(item.change_rate*100).toFixed(2),\"% \",/*#__PURE__*/_jsx(\"br\",{}),\" \",item.change_price.toLocaleString()]})}):/*#__PURE__*/_jsx(\"td\",{className:\"lightMode\",id:\"owned-td-changeRate\",children:/*#__PURE__*/_jsxs(\"span\",{children:[(item.change_rate*100).toFixed(2),\"% \",/*#__PURE__*/_jsx(\"br\",{}),\" \",item.change_price.toLocaleString()]})}),/*#__PURE__*/_jsx(\"td\",{className:\"lightMode\",id:\"owned-td-quantity\",children:/*#__PURE__*/_jsx(\"span\",{className:\"td-volume\",children:userOwnedQuantity})})]},i));})})]})}):/*#__PURE__*/_jsx(\"div\",{className:\"crypto-notice\",children:\"\\uBCF4\\uC720 \\uD654\\uD3D0\\uB97C \\uD655\\uC778\\uD558\\uC2DC\\uB824\\uBA74 \\uB85C\\uADF8\\uC778 \\uD574\\uC8FC\\uC138\\uC694.\"}):logInEmail!==\"\"?/*#__PURE__*/ // 관심 화폐 영역\n_jsx(SimpleBar,{className:\"scrollBar-listTable\",children:/*#__PURE__*/_jsxs(\"table\",{className:\"list-table\",children:[/*#__PURE__*/_jsxs(\"colgroup\",{children:[/*#__PURE__*/_jsx(\"col\",{width:150}),/*#__PURE__*/_jsx(\"col\",{width:90}),/*#__PURE__*/_jsx(\"col\",{width:90}),/*#__PURE__*/_jsx(\"col\",{width:90})]}),/*#__PURE__*/_jsx(\"tbody\",{className:\"scrollable-tbody\",children:filteredData.map(function(item,i){// 가격의 변화가 생긴 state를 테이블에서 찾아 해당 td 시각화\nvar isChanged=differences.some(function(diff,index){return diff.index===i&&diff.newValue===item.price;});var priceClass_rise=isChanged?\"change-price-rise\":\"\";var priceClass_fall=isChanged?\"change-price-fall\":\"\";// DB에서 가져온 관심화폐 목록과 일치하는 행을 찾음\nvar isFavorited=Array.isArray(favoriteCrypto)&&favoriteCrypto.some(function(diff,index){return item.name===diff.crypto_name;});return(// 관심화폐만 출력\nisFavorited&&/*#__PURE__*/_jsxs(\"tr\",{onClick:function onClick(){dispatch(setBuyingPrice(filteredData[i].price));// 특정 화폐를 클릭하면 해당 화폐의 값으로 '매수가격'이 업데이트 됨\ndispatch(setSellingPrice(filteredData[i].price));// 특정 화폐를 클릭하면 해당 화폐의 값으로 '매도가격'이 업데이트 됨\nnameSelect(filteredData[i].name);marketSelect(filteredData[i].market);setSelectedCrypto(filteredData[i]);selectMarket_date(filteredData[i].market);selectMarket_time(filteredData[i].market,selectedChartSort);selectAskingPrice(filteredData[i].market);selectClosedPrice(filteredData[i].market);},children:[/*#__PURE__*/_jsxs(\"td\",{className:\"td-name lightMode\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"span-star\",children:/*#__PURE__*/_jsx(\"img\",{onClick:function onClick(){starClick(i);addCryptoToUser(logInEmail,filteredData[i].name);}// 최초 star[i]의 상태는 'starOn'일 수가 없으므로 반드시 starOff 출력\n// src={star[i] === 'starOn' ? starOn : starOff}\n,src:isFavorited?starOn:starOff,alt:\"star\"})}),/*#__PURE__*/_jsxs(\"div\",{className:\"div-name\",children:[/*#__PURE__*/_jsx(\"div\",{children:item.name}),/*#__PURE__*/_jsx(\"div\",{children:item.market})]})]}),item.change===\"RISE\"?/*#__PURE__*/_jsx(\"td\",{className:\"lightMode\",children:/*#__PURE__*/_jsx(\"span\",{className:\"td-rise \".concat(priceClass_rise),children:item.price.toLocaleString()})}):item.change===\"FALL\"?/*#__PURE__*/_jsx(\"td\",{className:\"lightMode\",children:/*#__PURE__*/_jsx(\"span\",{className:\"td-fall \".concat(priceClass_fall),children:item.price.toLocaleString()})}):/*#__PURE__*/_jsx(\"td\",{className:\"lightMode\",children:/*#__PURE__*/_jsx(\"span\",{children:item.price.toLocaleString()})}),item.change===\"RISE\"?/*#__PURE__*/_jsx(\"td\",{className:\"lightMode\",children:/*#__PURE__*/_jsxs(\"span\",{className:\"td-rise\",children:[\"+\",(item.change_rate*100).toFixed(2),\"% \",/*#__PURE__*/_jsx(\"br\",{}),\" \",item.change_price.toLocaleString()]})}):item.change===\"FALL\"?/*#__PURE__*/_jsx(\"td\",{className:\"lightMode\",children:/*#__PURE__*/_jsxs(\"span\",{className:\"td-fall\",children:[\"-\",(item.change_rate*100).toFixed(2),\"% \",/*#__PURE__*/_jsx(\"br\",{}),\" \",item.change_price.toLocaleString()]})}):/*#__PURE__*/_jsx(\"td\",{className:\"lightMode\",children:/*#__PURE__*/_jsxs(\"span\",{children:[(item.change_rate*100).toFixed(2),\"% \",/*#__PURE__*/_jsx(\"br\",{}),\" \",item.change_price.toLocaleString()]})}),/*#__PURE__*/_jsx(\"td\",{className:\"lightMode\",children:/*#__PURE__*/_jsxs(\"span\",{className:\"td-volume\",children:[Number(String(Math.floor(item.trade_price)).slice(0,-6)).toLocaleString(),\"\\uBC31\\uB9CC\"]})})]},i));})})]})}):/*#__PURE__*/_jsx(\"div\",{className:\"crypto-notice\",children:\"\\uAD00\\uC2EC \\uD654\\uD3D0\\uB97C \\uD655\\uC778\\uD558\\uC2DC\\uB824\\uBA74 \\uB85C\\uADF8\\uC778 \\uD574\\uC8FC\\uC138\\uC694.\"})]});};export{CryptoList};","map":{"version":3,"names":["useDispatch","useSelector","setFilteredData","setStar","setCr_name_selected","setCr_market_selected","setSortedData","setCandle_per_date","setCandle_per_week","setCandle_per_month","setCandle_per_minute","setCr_name","setCr_price","setCr_market","setCr_change","setCr_change_rate","setCr_change_price","setCr_trade_price","setCr_trade_volume","setCr_open_price","setCr_high_price","setCr_low_price","setCandle_per_date_BTC","setClosed_data","setCr_selected","setFavoriteCrypto","setBuyingPrice","setLogInEmail","setLogInUser","setSellingPrice","useEffect","useState","img_sort","img_sort_up","img_sort_down","starOn","starOff","SimpleBar","axios","useFunction","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","CryptoList","dispatch","cr_name","state","cr_price","cr_market","cr_change","cr_change_rate","cr_change_price","cr_trade_price","cr_trade_volume","cr_open_price","cr_high_price","cr_low_price","star","filteredData","cr_market_selected","_useState","_useState2","_slicedToArray","search_cr","setSearch_cr","_useState3","_useState4","sort_states","setSort_states","sort_images","selectedChartSort","chartSortTime","chartSortDate","ownedCrypto","isBuying","_useState5","_useState6","selectedCrypto","setSelectedCrypto","_useState7","_useState8","userSelectedCrypto","setUserSelectedCrypto","logInEmail","favoriteCrypto","_useState9","_useState10","isFavorited","setIsFavorited","_useState11","_useState12","listCategory","setListCategory","_useState13","_useState14","prevData","setPrevData","_useState15","_useState16","differences","setDifferences","_useFunction","getOwnedCrypto","getTradeHistory","selectAskingPrice","getCryptoName","selectAskingPrice_unSigned","getAskingPrice_unSigned","unSignedCrypto","Object","entries","filter","_ref","_ref2","key","value","map","_ref3","_ref4","unSignedMarket","name","isCorresponed","find","market","i","length","interval","setInterval","fetchData","initialData","clearInterval","getFavoriteCrypto","_ref5","_asyncToGenerator","_regeneratorRuntime","mark","_callee","response","wrap","_callee$","_context","prev","next","get","sent","data","candle_btc_date","t0","console","error","stop","apply","arguments","_ref6","_callee2","_callee2$","_context2","price","change","change_rate","change_price","trade_price","trade_volume","open_price","high_price","low_price","updatedData","item","toLowerCase","includes","log","newDifferences","undefined","forEach","index","push","oldValue","newValue","newSelectedCrypto","crypto","selectClosedPrice","initial_newSelectedCrypto","selectMarket_time","selectMarket_date","userItem","localStorage","getItem","user","JSON","parse","username","email","_ref7","_callee3","_callee3$","_context3","post","headers","_x","minute","_ref8","_callee4","_callee4$","_context4","_x2","_x3","_ref9","_callee5","_callee5$","_context5","_x4","_ref10","_callee6","_callee6$","_context6","_x5","_ref11","_callee7","_callee7$","_context7","_x6","starClick","addCryptoToUser","cryptoName","_ref12","_callee8","_callee8$","_context8","crypto_name","_x7","_x8","alert","_callee9","_callee9$","_context9","concat","sortClick","prevStates","states_copy","_toConsumableArray","sortedData","rise_crypto","even_crypto","fall_crypto","sort","a","b","localeCompare","nameSelect","marketSelect","className","children","xmlns","viewBox","width","height","fill","d","type","placeholder","onChange","e","target","onClick","id","src","alt","isChanged","some","diff","priceClass_rise","priceClass_fall","Array","isArray","toLocaleString","toFixed","Number","String","Math","floor","slice","_Number","_ownedCrypto$find","isOwned","ownedQuantity","quantity","ownedMarket","userOwnedQuantity","endsWith"],"sources":["C:/VS_Project/JeayBit/client/src/components/CryptoList.tsx"],"sourcesContent":["import { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n  RootState,\r\n  setFilteredData,\r\n  setStar,\r\n  Crypto,\r\n  setCr_name_selected,\r\n  setCr_market_selected,\r\n  setSortedData,\r\n  setCandle_per_date,\r\n  setCandle_per_week,\r\n  setCandle_per_month,\r\n  setCandle_per_minute,\r\n  setCr_name,\r\n  setCr_price,\r\n  setCr_market,\r\n  setCr_change,\r\n  setCr_change_rate,\r\n  setCr_change_price,\r\n  setCr_trade_price,\r\n  setCr_trade_volume,\r\n  setCr_open_price,\r\n  setCr_high_price,\r\n  setCr_low_price,\r\n  setCandle_per_date_BTC,\r\n  setClosed_data,\r\n  setCr_selected,\r\n  setFavoriteCrypto,\r\n  setBuyingPrice,\r\n  setLogInEmail,\r\n  setLogInUser,\r\n  setSellingPrice,\r\n} from \"../store\";\r\nimport { useEffect, useState } from \"react\";\r\nimport img_sort from \"../assets/images/sort.png\";\r\nimport img_sort_up from \"../assets/images/sort-up.png\";\r\nimport img_sort_down from \"../assets/images/sort-down.png\";\r\nimport starOn from \"../assets/images/star-on.png\";\r\nimport starOff from \"../assets/images/star-off.png\";\r\nimport SimpleBar from \"simplebar-react\";\r\nimport \"simplebar/dist/simplebar.min.css\";\r\nimport axios from \"axios\";\r\nimport useFunction from \"./useFuction\";\r\n\r\nconst CryptoList = () => {\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const cr_name = useSelector((state: RootState) => state.cr_name);\r\n  const cr_price = useSelector((state: RootState) => state.cr_price);\r\n  const cr_market = useSelector((state: RootState) => state.cr_market);\r\n  const cr_change = useSelector((state: RootState) => state.cr_change);\r\n  const cr_change_rate = useSelector((state: RootState) => state.cr_change_rate);\r\n  const cr_change_price = useSelector((state: RootState) => state.cr_change_price);\r\n  const cr_trade_price = useSelector((state: RootState) => state.cr_trade_price);\r\n  const cr_trade_volume = useSelector((state: RootState) => state.cr_trade_volume);\r\n  const cr_open_price = useSelector((state: RootState) => state.cr_open_price);\r\n  const cr_high_price = useSelector((state: RootState) => state.cr_high_price);\r\n  const cr_low_price = useSelector((state: RootState) => state.cr_low_price);\r\n  const star = useSelector((state: RootState) => state.star);\r\n  const filteredData = useSelector((state: RootState) => state.filteredData);\r\n  const cr_market_selected = useSelector((state: RootState) => state.cr_market_selected);\r\n\r\n  // 검색값을 관리하기 위한 state\r\n  const [search_cr, setSearch_cr] = useState<string>(\"\");\r\n\r\n  // 차례로 화폐명, 현재가, 전일대비, 거래대금의 정렬 상태를 관리\r\n  const [sort_states, setSort_states] = useState<number[]>([0, 0, 0, 0]);\r\n\r\n  // 정렬하려는 목적에 따라 이미지를 변경하기 위해 배열로 생성\r\n  const sort_images = [img_sort, img_sort_down, img_sort_up];\r\n\r\n  const selectedChartSort = useSelector((state: RootState) => state.selectedChartSort);\r\n  const chartSortTime = useSelector((state: RootState) => state.chartSortTime);\r\n  const chartSortDate = useSelector((state: RootState) => state.chartSortDate);\r\n  const ownedCrypto = useSelector((state: RootState) => state.ownedCrypto);\r\n  const isBuying = useSelector((state: RootState) => state.isBuying);\r\n\r\n  const [selectedCrypto, setSelectedCrypto] = useState<any>();\r\n  const [userSelectedCrypto, setUserSelectedCrypto] = useState<any>();\r\n\r\n  const logInEmail = useSelector((state: RootState) => state.logInEmail);\r\n\r\n  const favoriteCrypto = useSelector((state: RootState) => state.favoriteCrypto);\r\n  const [isFavorited, setIsFavorited] = useState<boolean>(false);\r\n  const [listCategory, setListCategory] = useState<string>(\"원화\");\r\n\r\n  // 화폐 가격을 업데이트 하기 전에 해당 state에 담음\r\n  const [prevData, setPrevData] = useState<number[]>();\r\n\r\n  // 이전 화폐 가격과 현재 화폐 가격을 비교하여 변화가 발생한 화폐를 저장할 state\r\n  const [differences, setDifferences] = useState<\r\n    {\r\n      index: number;\r\n      oldValue: number;\r\n      newValue: number;\r\n    }[]\r\n  >([]);\r\n\r\n  const { getOwnedCrypto, getTradeHistory, selectAskingPrice, getCryptoName, selectAskingPrice_unSigned } = useFunction();\r\n\r\n  const getAskingPrice_unSigned = () => {\r\n\r\n    // Object.entries = 객체를 [key, value]쌍의 배열로 변환 \r\n    let unSignedCrypto = Object.entries(isBuying)\r\n      .filter(([key, value]) => value === true)\r\n      .map(([key, value]) => key)\r\n\r\n    // 마켓명으로 요청을 보내야 하기 때문에, 화폐명을 마켓명으로 변경\r\n    let unSignedMarket: (string | null)[] = unSignedCrypto.map((name) => {\r\n      let isCorresponed = filteredData.find(isCorresponed => isCorresponed.name === name)\r\n      return isCorresponed ? isCorresponed.market : null\r\n    })\r\n\r\n    for (let i = 0; i < unSignedMarket.length; i++) {\r\n      if (unSignedMarket[i]) {\r\n        selectAskingPrice_unSigned(unSignedMarket[i] as string);\r\n      }\r\n    }\r\n\r\n    return unSignedMarket;\r\n  }\r\n\r\n  useEffect(() => {\r\n    // const 변수 = setInterval(() => { 콜백함수, 시간 })\r\n    // fetchData 함수를 1초마다 실행 - 서버에서 받아오는 값을 1초마다 갱신시킴\r\n    const interval = setInterval(() => {\r\n      fetchData();\r\n    }, 1000);\r\n\r\n    initialData();\r\n\r\n    // clearInterval(변수)\r\n    // setInterval이 반환하는 interval ID를 clearInterval 함수로 제거\r\n    return () => clearInterval(interval);\r\n  }, []);\r\n\r\n  // 별 이미지를 클릭할 때마다 서버로부터 관심 화폐에 대한 정보 받아옴\r\n  useEffect(() => {\r\n    if (logInEmail !== '') {\r\n      getFavoriteCrypto(logInEmail);\r\n    }\r\n  }, [isFavorited]);\r\n\r\n  // 화면에 보여질 초기 화폐의 차트(비트코인)\r\n  const initialData = async () => {\r\n    try {\r\n      const response = await axios.get(\"http://127.0.0.1:8000/get_data/\");\r\n      dispatch(setCandle_per_date_BTC(response.data.candle_btc_date));\r\n      dispatch(setCr_market_selected(response.data.market[0]));\r\n      dispatch(setCr_name_selected(response.data.name[0]));\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n  // 비동기 함수 async를 이용하여 데이터를 받아오는 동안에도 다른 작업을 가능하게 함\r\n  // = async function () {}\r\n  const fetchData = async () => {\r\n    try {\r\n      const response = await axios.get(\"http://127.0.0.1:8000/get_data/\");\r\n      dispatch(setCr_name(response.data.name));\r\n      dispatch(setCr_price(response.data.price));\r\n      dispatch(setCr_market(response.data.market));\r\n      dispatch(setCr_change(response.data.change));\r\n      dispatch(setCr_change_rate(response.data.change_rate));\r\n      dispatch(setCr_change_price(response.data.change_price));\r\n      dispatch(setCr_trade_price(response.data.trade_price));\r\n      dispatch(setCr_trade_volume(response.data.trade_volume));\r\n      dispatch(setCr_open_price(response.data.open_price));\r\n      dispatch(setCr_high_price(response.data.high_price));\r\n      dispatch(setCr_low_price(response.data.low_price));\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n  // 필터링 및 정렬된 데이터를 새로운 배열로 생성 -> setFilteredData로 상태를 업데이트\r\n  // price = 숫자형, f_price = 문자형 / 숫자형으로 정렬, 문자형으로 출력\r\n  const updatedData = cr_name.map((name, i) => ({\r\n    name,\r\n    price: cr_price[i],\r\n    market: cr_market[i],\r\n    change: cr_change[i],\r\n    change_rate: cr_change_rate[i],\r\n    change_price: cr_change_price[i],\r\n    trade_price: cr_trade_price[i],\r\n    trade_volume: cr_trade_volume[i],\r\n    open_price: cr_open_price[i],\r\n    high_price: cr_high_price[i],\r\n    low_price: cr_low_price[i],\r\n    star: star[i],\r\n    // 검색어에 해당하는 데이터를 비교하여 배열을 재생성\r\n  })).filter((item) =>\r\n    item.name.toLowerCase().includes(search_cr.toLowerCase())\r\n  );\r\n\r\n  // useEffect(() => {\r\n  //   if (filteredData.length === 0 && updatedData.length > 0) {\r\n  //     dispatch(setFilteredData(updatedData));\r\n  //   }\r\n  // });\r\n\r\n  console.log();\r\n\r\n  // 화폐 가격의 변화를 감지하고 이전 값과 비교하여 변화가 생긴 값을 상태에 업데이트\r\n  useEffect(() => {\r\n    setPrevData(cr_price); // state의 업데이트는 비동기적이기 때문에 값이 즉시 바뀌지 않음. 그러므로 이 useEffect() 안에서 prevData는 아직 이전의 값을 가지고 있기 때문에 cr_price와 prevData는 다른 값을 가짐. (cr_price = 현재값, prevData = 이전값)\r\n\r\n    let newDifferences: {\r\n      index: number;\r\n      oldValue: number;\r\n      newValue: number;\r\n    }[] = [];\r\n\r\n    // 화폐 리스트가 변할 때마다 변화 이전 값과 현재 값을 비교\r\n    if (prevData !== undefined) {\r\n      prevData.forEach((value, index) => {\r\n        if (value !== cr_price[index]) {\r\n          newDifferences.push({\r\n            index: index,\r\n            oldValue: value,\r\n            newValue: cr_price[index],\r\n          });\r\n        }\r\n      });\r\n    }\r\n    setDifferences(newDifferences);\r\n\r\n    // 별도로 선택한 화폐가 있을 때\r\n    if (selectedCrypto) {\r\n      const newSelectedCrypto = filteredData.find(\r\n        (crypto) => crypto.name === selectedCrypto.name\r\n      );\r\n      if (newSelectedCrypto) {\r\n        setSelectedCrypto(newSelectedCrypto);\r\n        setUserSelectedCrypto(newSelectedCrypto);\r\n        dispatch(setCr_selected(newSelectedCrypto));\r\n      }\r\n      // 호가 및 체결내역 호출\r\n      selectClosedPrice(selectedCrypto.market);\r\n      selectAskingPrice(selectedCrypto.market);\r\n\r\n      getAskingPrice_unSigned();\r\n\r\n    }\r\n    // 선택한 화폐가 없을 때(비트코인의 정보 출력)\r\n    else {\r\n      if (filteredData.length > 0) {\r\n        const initial_newSelectedCrypto = filteredData[0];\r\n        if (initial_newSelectedCrypto) {\r\n          setSelectedCrypto(initial_newSelectedCrypto); // 해당 코드 때문에 '비트코인'이 강제 선택됨. 즉, if문 조건 성립\r\n          dispatch(setCr_selected(initial_newSelectedCrypto));\r\n          dispatch(setBuyingPrice(initial_newSelectedCrypto.price));\r\n          dispatch(setSellingPrice(initial_newSelectedCrypto.price));\r\n        }\r\n      }\r\n    }\r\n    // 차트에 실시간 데이터를 전달(시간당)\r\n    if (filteredData.length > 0 && selectedCrypto) {\r\n      if (selectedCrypto.name && selectedCrypto.market === \"KRW-BTC\") {\r\n        selectMarket_time(cr_market_selected, chartSortTime);\r\n      } else {\r\n        selectMarket_time(cr_market_selected, chartSortTime);\r\n      }\r\n    }\r\n  }, [filteredData]);\r\n\r\n  // 리스트에 있는 화폐 검색시 업데이트\r\n  useEffect(() => {\r\n    // fetchData();\r\n    dispatch(setFilteredData(updatedData));\r\n  }, [search_cr, cr_price]);\r\n\r\n  useEffect(() => {\r\n    if (cr_market_selected) {\r\n      selectMarket_date(cr_market_selected);\r\n      // selectMarket_time(cr_market_selected, chartSortTime);\r\n    }\r\n  }, [cr_market_selected, chartSortDate, chartSortTime]);\r\n\r\n  // 화면이 첫 렌더링 될 때마다 \r\n  useEffect(() => {\r\n    const userItem = localStorage.getItem('user');\r\n    if (userItem !== null) {\r\n      const user = JSON.parse(userItem);\r\n      if (user) {\r\n        dispatch(setLogInUser(user.username));\r\n        dispatch(setLogInEmail(user.email));\r\n        getFavoriteCrypto(user.email);\r\n        getOwnedCrypto(user.email);\r\n        getTradeHistory(user.email);\r\n        getCryptoName(user.email);\r\n\r\n        getAskingPrice_unSigned()\r\n      }\r\n    }\r\n  }, [])\r\n\r\n  // 선택된 화폐에 대한 체결내역 호출\r\n  const selectClosedPrice = (market: string) => {\r\n    (async (market) => {\r\n      try {\r\n        const response = await axios.post(\r\n          \"http://127.0.0.1:8000/closed_price/\",\r\n          {\r\n            market: market,\r\n          },\r\n          {\r\n            headers: {\r\n              \"Content-Type\": \"application/json\",\r\n            },\r\n          }\r\n        );\r\n\r\n        // console.log(\"체결내역 : \", response.data);\r\n        dispatch(setClosed_data(response.data));\r\n      } catch (error) {\r\n        console.error(\"Failed to send data to Django server\", error);\r\n      }\r\n    })(market);\r\n  };\r\n\r\n\r\n\r\n  // 리스트에서 화폐를 선택하면 해당 화폐에 대한 캔들 호출(차트의 분에 따라)\r\n  const selectMarket_time = (market: string, minute: string) => {\r\n    (async (market, minute) => {\r\n      if (minute !== '') {\r\n        try {\r\n          const response = await axios.post(\r\n            \"http://127.0.0.1:8000/candle_per_minute/\",\r\n            {\r\n              market: market,\r\n              minute: minute,\r\n            },\r\n            {\r\n              headers: {\r\n                \"Content-Type\": \"application/json\",\r\n              },\r\n            }\r\n          );\r\n          // console.log(chartSortTime, \"당 요청값: \", response.data);\r\n          dispatch(setCandle_per_minute(response.data));\r\n        } catch (error) {\r\n          console.error(\"Failed to send data to Django server\", error);\r\n        }\r\n      }\r\n    })(market, minute);\r\n  };\r\n\r\n  // 리스트에서 화폐를 선택하면 해당 화폐에 대한 캔들 호출(차트의 일자에 따라)\r\n  const selectMarket_date = (market: string) => {\r\n    if (chartSortDate === \"1일\") {\r\n      (async (market) => {\r\n        try {\r\n          const response = await axios.post(\r\n            \"http://127.0.0.1:8000/candle_per_date/\",\r\n            {\r\n              market: market,\r\n              // date: tempChartSort,\r\n            },\r\n            {\r\n              headers: {\r\n                \"Content-Type\": \"application/json\",\r\n              },\r\n            }\r\n          );\r\n\r\n          // console.log(\"1일 요청된 값 : \", response.data)\r\n          dispatch(setCandle_per_date(response.data));\r\n        } catch (error) {\r\n          console.error(\"Failed to send data to Django server\", error);\r\n        }\r\n      })(market);\r\n    } else if (chartSortDate === \"1주\") {\r\n      void (async (market) => {\r\n        try {\r\n          const response = await axios.post(\r\n            \"http://127.0.0.1:8000/candle_per_week/\",\r\n            {\r\n              market: market,\r\n            },\r\n            {\r\n              headers: {\r\n                \"Content-Type\": \"application/json\",\r\n              },\r\n            }\r\n          );\r\n\r\n          // console.log(\"1주 요청된 값 : \", response.data)\r\n          dispatch(setCandle_per_week(response.data));\r\n        } catch (error) {\r\n          console.error(\"Failed to send data to Django server\", error);\r\n        }\r\n      })(market);\r\n    } else if (chartSortDate === \"1개월\") {\r\n      void (async (market) => {\r\n        try {\r\n          const response = await axios.post(\r\n            \"http://127.0.0.1:8000/candle_per_month/\",\r\n            {\r\n              market: market,\r\n            },\r\n            {\r\n              headers: {\r\n                \"Content-Type\": \"application/json\",\r\n              },\r\n            }\r\n          );\r\n\r\n          // console.log(\"1개월 요청된 값 : \", response.data)\r\n          dispatch(setCandle_per_month(response.data));\r\n        } catch (error) {\r\n          console.error(\"Failed to send data to Django server\", error);\r\n        }\r\n      })(market);\r\n    }\r\n  };\r\n\r\n  // 별 이미지를 클릭하면 on off\r\n  const starClick = (index: number) => {\r\n    dispatch(setStar(index));\r\n    setIsFavorited(!isFavorited);\r\n  };\r\n\r\n  // 로그인한 사용자에 대해 관심 화폐를 업데이트\r\n  const addCryptoToUser = (email: string, cryptoName: string) => {\r\n    if (logInEmail !== \"\") {\r\n      (async (email, cryptoName) => {\r\n        try {\r\n          axios.post(\"http://127.0.0.1:8000/add_favoriteCrypto_to_user/\", {\r\n            email: email,\r\n            crypto_name: cryptoName,\r\n          });\r\n        } catch (error) {\r\n          console.log(\"관심 화폐 정보 전송 실패\");\r\n        }\r\n      })(email, cryptoName);\r\n    } else {\r\n      alert(\"사용자 존재X\");\r\n    }\r\n  };\r\n\r\n  // 로그인한 사용자에 대한 관심 화폐 정보를 받아옴\r\n  const getFavoriteCrypto = (logInEmail: string) => {\r\n    (async () => {\r\n      try {\r\n        const response = await axios.get(\r\n          `http://127.0.0.1:8000/get_user_favoriteCrypto/${logInEmail}/`\r\n        );\r\n        console.log(\"반환값-관심화폐 : \", response.data);\r\n        dispatch(setFavoriteCrypto(response.data));\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    })();\r\n  };\r\n\r\n  // 정렬 이미지 클릭 이벤트\r\n  const sortClick = (index: number) => {\r\n    // 정렬 이미지 순환\r\n    setSort_states((prevStates) => {\r\n      const states_copy = [...prevStates];\r\n      states_copy[index] = (states_copy[index] + 1) % sort_images.length;\r\n\r\n      let sortedData = [...filteredData];\r\n\r\n      // 화폐를 전일대비 상승/동결/하락 여부에 따라 구분\r\n      // 값 자체에 양수, 음수 구분이 되어있는 것이 아니기 때문에 정렬하기 전에 구분을 지어줘야 함\r\n      let rise_crypto: Crypto[] = [];\r\n      let even_crypto: Crypto[] = [];\r\n      let fall_crypto: Crypto[] = [];\r\n\r\n      // 상승/동결/하락 여부에 따라 구분하여 새 배열 생성\r\n      sortedData.forEach((item) => {\r\n        rise_crypto = sortedData.filter((item) => item.change === \"RISE\");\r\n        even_crypto = sortedData.filter((item) => item.change === \"EVEN\");\r\n        fall_crypto = sortedData.filter((item) => item.change === \"FALL\");\r\n      });\r\n\r\n      switch (index) {\r\n        // 화폐 이름순 정렬\r\n        case 0:\r\n          if (states_copy[index] === 0) {\r\n            states_copy[index] = 1;\r\n          }\r\n          if (states_copy[index] === 1) {\r\n            sortedData.sort((a, b) => a.name.localeCompare(b.name));\r\n            // dispatch(setFilteredData(sortedData));\r\n\r\n            sort_states[1] = 0;\r\n            sort_states[2] = 0;\r\n            sort_states[3] = 0;\r\n          }\r\n          if (states_copy[index] === 2) {\r\n            sortedData.sort((a, b) => b.name.localeCompare(a.name));\r\n            // dispatch(setFilteredData(sortedData));\r\n\r\n            sort_states[1] = 0;\r\n            sort_states[2] = 0;\r\n            sort_states[3] = 0;\r\n          }\r\n          break;\r\n\r\n        // 화폐 가격순 정렬\r\n        case 1:\r\n          if (states_copy[index] === 0) {\r\n            states_copy[index] = 1;\r\n          }\r\n          if (states_copy[index] === 1) {\r\n            sortedData.sort((a, b) => b.price - a.price);\r\n            // dispatch(setFilteredData(sortedData));\r\n\r\n            sort_states[0] = 0;\r\n            sort_states[2] = 0;\r\n            sort_states[3] = 0;\r\n          }\r\n          if (states_copy[index] === 2) {\r\n            sortedData.sort((a, b) => a.price - b.price);\r\n            // dispatch(setFilteredData(sortedData));\r\n\r\n            sort_states[0] = 0;\r\n            sort_states[2] = 0;\r\n            sort_states[3] = 0;\r\n          }\r\n          break;\r\n\r\n        // 화폐 전일대비 변화순 정렬\r\n        case 2:\r\n          if (states_copy[index] === 0) {\r\n            states_copy[index] = 1;\r\n          }\r\n          if (states_copy[index] === 1) {\r\n            rise_crypto.sort((a, b) => b.change_rate - a.change_rate);\r\n            even_crypto.sort((a, b) => b.change_rate - a.change_rate);\r\n            fall_crypto.sort((a, b) => a.change_rate - b.change_rate);\r\n\r\n            // 새 배열을 원본 배열의 카피본에 병합 - 내림차순이기 때문에 상승, 동결, 하락순으로 병합\r\n            sortedData = [...rise_crypto, ...even_crypto, ...fall_crypto];\r\n            // dispatch(setFilteredData(sortedData));\r\n\r\n            sort_states[0] = 0;\r\n            sort_states[1] = 0;\r\n            sort_states[3] = 0;\r\n          }\r\n          if (states_copy[index] === 2) {\r\n            fall_crypto.sort((a, b) => b.change_rate - a.change_rate);\r\n            even_crypto.sort((a, b) => b.change_rate - a.change_rate);\r\n            rise_crypto.sort((a, b) => a.change_rate - b.change_rate);\r\n\r\n            // 새 배열을 원본 배열의 카피본에 병합 - 오름차순이기 때문에 하락, 동결, 상승순으로 병합\r\n            sortedData = [...fall_crypto, ...even_crypto, ...rise_crypto];\r\n            // dispatch(setFilteredData(sortedData));\r\n\r\n            sort_states[0] = 0;\r\n            sort_states[1] = 0;\r\n            sort_states[3] = 0;\r\n          }\r\n          break;\r\n\r\n        // 거래대금순 정렬\r\n        case 3:\r\n          if (states_copy[index] === 0) {\r\n            states_copy[index] = 1;\r\n          }\r\n          if (states_copy[index] === 1) {\r\n            sortedData.sort((a, b) => b.trade_price - a.trade_price);\r\n            // dispatch(setFilteredData(sortedData));\r\n\r\n            sort_states[0] = 0;\r\n            sort_states[1] = 0;\r\n            sort_states[2] = 0;\r\n          }\r\n          if (states_copy[index] === 2) {\r\n            sortedData.sort((a, b) => a.trade_price - b.trade_price);\r\n            // dispatch(setFilteredData(sortedData));\r\n\r\n            sort_states[0] = 0;\r\n            sort_states[1] = 0;\r\n            sort_states[2] = 0;\r\n          }\r\n          break;\r\n      }\r\n      dispatch(setFilteredData(sortedData));\r\n      dispatch(setSortedData(sortedData));\r\n\r\n      return states_copy;\r\n    });\r\n  };\r\n\r\n  // 각 값들을 테이블에서 클릭한 화폐의 정보로 변경\r\n  const nameSelect = (value: string) => {\r\n    dispatch(setCr_name_selected(value));\r\n  };\r\n  const marketSelect = (value: string) => {\r\n    dispatch(setCr_market_selected(value));\r\n  };\r\n\r\n  return (\r\n    <div className=\"lightMode\">\r\n      {/* 검색 공간 */}\r\n      <div className=\"list-search lightMode\">\r\n        {/* <img className=\"img-search\" src={search}></img> */}\r\n        <svg\r\n          className=\"img-search\"\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n          viewBox=\"0 0 18 18\"\r\n          width=\"30\"\r\n          height=\"30\"\r\n        >\r\n          <path\r\n            fill=\"currentColor\"\r\n            d=\"M3.5 8a4.5 4.5 0 1 1 9 0 4.5 4.5 0 0 1-9 0ZM8 2a6 6 0 1 0 3.65 10.76l3.58 3.58 1.06-1.06-3.57-3.57A6 6 0 0 0 8 2Z\"\r\n          ></path>\r\n        </svg>\r\n        <input\r\n          type=\"text\"\r\n          className=\"crypto-search lightMode\"\r\n          placeholder=\"검색\"\r\n          value={search_cr}\r\n          onChange={(e) => setSearch_cr(e.target.value)}\r\n        ></input>\r\n      </div>\r\n\r\n      {/* 원화, 보유, 관심 선택란 */}\r\n      <div className=\"list-category\">\r\n        <span\r\n          className={`${listCategory === \"원화\" ? \"list-category-clicked\" : \"\"\r\n            }`}\r\n          onClick={() => setListCategory(\"원화\")}\r\n        >\r\n          원화\r\n        </span>\r\n        <span\r\n          className={`${listCategory === \"보유\" ? \"list-category-clicked\" : \"\"\r\n            }`}\r\n          onClick={() => setListCategory(\"보유\")}\r\n        >\r\n          보유\r\n        </span>\r\n        <span\r\n          className={`${listCategory === \"관심\" ? \"list-category-clicked\" : \"\"\r\n            }`}\r\n          onClick={() => setListCategory(\"관심\")}\r\n        >\r\n          관심\r\n        </span>\r\n      </div>\r\n\r\n      {/* 화폐 정보 테이블 */}\r\n      {/* 스크롤바를 넣기 위해 테이블을 두 개로 구성 */}\r\n      <table className=\"list-table\" id=\"listHead\">\r\n        <colgroup>\r\n          <col width={150} />\r\n          <col width={90} />\r\n          <col width={90} />\r\n          <col width={90} />\r\n        </colgroup>\r\n        <thead className=\"list-thead lightMode\">\r\n          <tr className=\"lightMode-title\">\r\n            {\r\n              listCategory !== '보유' ?\r\n                <>\r\n                  <th className=\"name\" onClick={() => sortClick(0)}>\r\n                    화폐명&nbsp;\r\n                    <img\r\n                      className=\"sort\"\r\n                      src={sort_images[sort_states[0]]}\r\n                      alt=\"화폐명\"\r\n                    ></img>\r\n                  </th>\r\n                  <th className=\"price\" onClick={() => sortClick(1)}>\r\n                    현재가&nbsp;\r\n                    <img\r\n                      className=\"sort\"\r\n                      src={sort_images[sort_states[1]]}\r\n                      alt=\"현재가\"\r\n                    ></img>\r\n                  </th>\r\n                  <th className=\"compare\" onClick={() => sortClick(2)}>\r\n                    전일대비&nbsp;\r\n                    <img\r\n                      className=\"sort\"\r\n                      src={sort_images[sort_states[2]]}\r\n                      alt=\"전일대비\"\r\n                    ></img>\r\n                  </th>\r\n                  <th className=\"volume\" onClick={() => sortClick(3)}>\r\n                    거래대금&nbsp;\r\n                    <img\r\n                      className=\"sort\"\r\n                      src={sort_images[sort_states[3]]}\r\n                      alt=\"거래대금\"\r\n                    ></img>\r\n                  </th>\r\n                </> :\r\n                <>\r\n                  <th className=\"name\" id=\"owned-name\" onClick={() => sortClick(0)}>\r\n                    화폐명&nbsp;\r\n                    <img\r\n                      className=\"sort\"\r\n                      src={sort_images[sort_states[0]]}\r\n                      alt=\"화폐명\"\r\n                    ></img>\r\n                  </th>\r\n                  <th className=\"price\" id=\"owned-price\" onClick={() => sortClick(1)}>\r\n                    현재가&nbsp;\r\n                    <img\r\n                      className=\"sort\"\r\n                      src={sort_images[sort_states[1]]}\r\n                      alt=\"현재가\"\r\n                    ></img>\r\n                  </th>\r\n                  <th className=\"compare\" id=\"owned-compare\" onClick={() => sortClick(2)}>\r\n                    전일대비&nbsp;\r\n                    <img\r\n                      className=\"sort\"\r\n                      src={sort_images[sort_states[2]]}\r\n                      alt=\"전일대비\"\r\n                    ></img>\r\n                  </th>\r\n                  <th className=\"volume\" id=\"owned-volume\" onClick={() => sortClick(2)}>\r\n                    보유수량&nbsp;\r\n                    <img\r\n                      className=\"sort\"\r\n                      src={sort_images[sort_states[2]]}\r\n                      alt=\"보유수량\"\r\n                    ></img>\r\n                  </th>\r\n                </>\r\n            }\r\n          </tr>\r\n        </thead>\r\n      </table>\r\n      {\r\n        listCategory === \"원화\" ? (\r\n          <SimpleBar className=\"scrollBar-listTable\">\r\n            <table className=\"list-table\">\r\n              <colgroup>\r\n                <col width={150} />\r\n                <col width={90} />\r\n                <col width={90} />\r\n                <col width={90} />\r\n              </colgroup>\r\n              <tbody className=\"scrollable-tbody\">\r\n                {/* 검색값을 반환한 filteredData 함수를 다시 반복문을 이용하여 출력 */}\r\n                {filteredData.map((item, i) => {\r\n\r\n                  // 가격의 변화가 생긴 state를 테이블에서 찾아 해당 td 시각화\r\n                  let isChanged = differences.some((diff, index) => {\r\n                    return diff.index === i && diff.newValue === item.price;\r\n                  });\r\n                  let priceClass_rise = isChanged ? \"change-price-rise\" : \"\";\r\n                  let priceClass_fall = isChanged ? \"change-price-fall\" : \"\";\r\n\r\n                  // DB에서 가져온 관심화폐 목록과 일치하는 행을 찾음\r\n                  let isFavorited =\r\n                    Array.isArray(favoriteCrypto) &&\r\n                    favoriteCrypto.some((diff, index) => {\r\n                      return item.name === diff.crypto_name;\r\n                    });\r\n\r\n                  return (\r\n                    <tr\r\n                      key={i}\r\n                      onClick={() => {\r\n                        dispatch(setBuyingPrice(filteredData[i].price)); // 특정 화폐를 클릭하면 해당 화폐의 값으로 '매수가격'이 업데이트 됨\r\n                        dispatch(setSellingPrice(filteredData[i].price)); // 특정 화폐를 클릭하면 해당 화폐의 값으로 '매도가격'이 업데이트 됨  \r\n\r\n                        nameSelect(filteredData[i].name);\r\n                        marketSelect(filteredData[i].market);\r\n                        setSelectedCrypto(filteredData[i]);\r\n                        selectMarket_date(filteredData[i].market);\r\n                        selectMarket_time(\r\n                          filteredData[i].market,\r\n                          selectedChartSort\r\n                        );\r\n                        selectAskingPrice(filteredData[i].market);\r\n                        selectClosedPrice(filteredData[i].market);\r\n                      }}\r\n                    >\r\n                      <td className=\"td-name lightMode\">\r\n                        <span className=\"span-star\">\r\n                          <img\r\n                            onClick={() => {\r\n                              starClick(i);\r\n                              addCryptoToUser(logInEmail, filteredData[i].name);\r\n                            }}\r\n                            // 최초 star[i]의 상태는 'starOn'일 수가 없으므로 반드시 starOff 출력\r\n                            // src={star[i] === 'starOn' ? starOn : starOff}\r\n                            src={isFavorited ? starOn : starOff}\r\n                            alt=\"star\"\r\n                          />\r\n                        </span>\r\n                        <div className=\"div-name\">\r\n                          <div>{item.name}</div>\r\n                          <div>{item.market}</div>\r\n                        </div>\r\n                      </td>\r\n\r\n                      {/* 전일 대비 가격이 상승했다면 청색, 하락했다면 적색, 동일하다면 검정색 */}\r\n                      {item.change === \"RISE\" ? (\r\n                        <td className=\"lightMode\">\r\n                          <span className={`td-rise ${priceClass_rise}`}>\r\n                            {item.price.toLocaleString()}\r\n                          </span>\r\n                        </td>\r\n                      ) : item.change === \"FALL\" ? (\r\n                        <td className=\"lightMode\">\r\n                          <span className={`td-fall ${priceClass_fall}`}>\r\n                            {item.price.toLocaleString()}\r\n                          </span>\r\n                        </td>\r\n                      ) : (\r\n                        <td className=\"lightMode\">\r\n                          <span>{item.price.toLocaleString()}</span>\r\n                        </td>\r\n                      )}\r\n                      {item.change === \"RISE\" ? (\r\n                        <td className=\"lightMode\">\r\n                          <span className=\"td-rise\">\r\n                            +{(item.change_rate * 100).toFixed(2)}% <br />{\" \"}\r\n                            {item.change_price.toLocaleString()}\r\n                          </span>\r\n                        </td>\r\n                      ) : item.change === \"FALL\" ? (\r\n                        <td className=\"lightMode\">\r\n                          <span className=\"td-fall\">\r\n                            -{(item.change_rate * 100).toFixed(2)}% <br />{\" \"}\r\n                            {item.change_price.toLocaleString()}\r\n                          </span>\r\n                        </td>\r\n                      ) : (\r\n                        <td className=\"lightMode\">\r\n                          <span>\r\n                            {(item.change_rate * 100).toFixed(2)}% <br />{\" \"}\r\n                            {item.change_price.toLocaleString()}\r\n                          </span>\r\n                        </td>\r\n                      )}\r\n                      <td className=\"lightMode\">\r\n                        <span className=\"td-volume\">\r\n                          {Number(\r\n                            String(Math.floor(item.trade_price)).slice(0, -6)\r\n                          ).toLocaleString()}\r\n                          백만\r\n                        </span>\r\n                      </td>\r\n                    </tr>\r\n                  );\r\n                })}\r\n              </tbody>\r\n            </table>\r\n          </SimpleBar>\r\n        ) : listCategory === \"보유\" ? (\r\n          logInEmail !== \"\" ? (\r\n            // 보유 화폐 영역\r\n            <SimpleBar className=\"scrollBar-listTable\">\r\n              <table className=\"list-table\">\r\n                <colgroup>\r\n                  <col width={150} />\r\n                  <col width={90} />\r\n                  <col width={90} />\r\n                  <col width={90} />\r\n                </colgroup>\r\n                <tbody className=\"scrollable-tbody\">\r\n                  {/* 검색값을 반환한 filteredData 함수를 다시 반복문을 이용하여 출력 */}\r\n                  {\r\n                    filteredData.map((item, i) => {\r\n\r\n                      // 가격의 변화가 생긴 state를 테이블에서 찾아 해당 td 시각화\r\n                      let isChanged = differences.some((diff, index) => {\r\n                        return diff.index === i && diff.newValue === item.price;\r\n                      });\r\n                      let priceClass_rise = isChanged ? \"change-price-rise\" : \"\";\r\n                      let priceClass_fall = isChanged ? \"change-price-fall\" : \"\";\r\n\r\n                      // DB에서 가져온 보유화폐 목록과 일치하는 행을 찾음\r\n                      let isOwned =\r\n                        Array.isArray(ownedCrypto) && ownedCrypto.some((diff, index) => {\r\n                          return item.name === diff.crypto_name;\r\n                        });\r\n\r\n                      // 관심화폐는 시각화 해주기 위해 구분\r\n                      let isFavorited =\r\n                        Array.isArray(favoriteCrypto) && favoriteCrypto.some((diff, index) => {\r\n                          return item.name === diff.crypto_name;\r\n                        });\r\n\r\n\r\n                      // 인덱스 한 번당 소유화폐를 순회시켜서 일치하는 요소를 찾고, 찾지 못한다면 ?를 이용해서 undefined를 반환\r\n                      let ownedQuantity = String(Number(ownedCrypto.find((crypto) => item.name === crypto.crypto_name)?.quantity)?.toFixed(2))\r\n\r\n                      let ownedMarket = (item.market).slice(4)\r\n\r\n                      let userOwnedQuantity = ownedQuantity + ownedMarket;\r\n\r\n                      // 전체 문자열의 길이가 12자리를 넘어갈 경우 12자리가 될 때 까지 마지막 인덱스 제거\r\n                      while (userOwnedQuantity.length > 12) {\r\n                        ownedQuantity = ownedQuantity.slice(0, -1);\r\n                        userOwnedQuantity = ownedQuantity + ownedMarket;\r\n                      }\r\n\r\n                      // 마지막 인덱스가 '.'일 경우 제거\r\n                      if (userOwnedQuantity.endsWith('.')) {\r\n                        userOwnedQuantity = userOwnedQuantity.slice(0, -1);\r\n                      }\r\n\r\n                      return (\r\n                        // 보유화폐만 출력\r\n                        isOwned && (\r\n                          <tr\r\n                            key={i}\r\n                            onClick={() => {\r\n                              dispatch(setBuyingPrice(filteredData[i].price)); // 특정 화폐를 클릭하면 해당 화폐의 값으로 '매수가격'이 업데이트 됨\r\n                              dispatch(setSellingPrice(filteredData[i].price)); // 특정 화폐를 클릭하면 해당 화폐의 값으로 '매더가격'이 업데이트 됨\r\n                              nameSelect(filteredData[i].name);\r\n                              marketSelect(filteredData[i].market);\r\n                              setSelectedCrypto(filteredData[i]);\r\n                              selectMarket_date(filteredData[i].market);\r\n                              selectMarket_time(\r\n                                filteredData[i].market,\r\n                                selectedChartSort\r\n                              );\r\n                              selectAskingPrice(filteredData[i].market);\r\n                              selectClosedPrice(filteredData[i].market);\r\n                            }}>\r\n                            <td className=\"td-name lightMode\" id=\"owned-td-name\">\r\n                              <span className=\"span-star\">\r\n                                <img\r\n                                  onClick={() => {\r\n                                    starClick(i);\r\n                                    addCryptoToUser(logInEmail, filteredData[i].name);\r\n                                  }}\r\n                                  // 최초 star[i]의 상태는 'starOn'일 수가 없으므로 반드시 starOff 출력\r\n                                  // src={star[i] === 'starOn' ? starOn : starOff}\r\n                                  src={isFavorited ? starOn : starOff}\r\n                                  alt=\"star\"\r\n                                />\r\n                              </span>\r\n                              <div className=\"div-name\">\r\n                                <div>{item.name}</div>\r\n                                <div>{item.market}</div>\r\n                              </div>\r\n                            </td>\r\n\r\n                            {/* 전일 대비 가격이 상승했다면 청색, 하락했다면 적색, 동일하다면 검정색 */}\r\n                            {\r\n                              item.change === \"RISE\" ? (\r\n                                <td className=\"lightMode\" id=\"owned-td-price\">\r\n                                  <span className={`td-rise ${priceClass_rise}`}>\r\n                                    {item.price.toLocaleString()}\r\n                                  </span>\r\n                                </td>\r\n                              ) : item.change === \"FALL\" ? (\r\n                                <td className=\"lightMode\" id=\"owned-td-price\">\r\n                                  <span className={`td-fall ${priceClass_fall}`}>\r\n                                    {item.price.toLocaleString()}\r\n                                  </span>\r\n                                </td>\r\n                              ) : (\r\n                                <td className=\"lightMode\" id=\"owned-td-price\">\r\n                                  <span>{item.price.toLocaleString()}</span>\r\n                                </td>\r\n                              )}\r\n                            {\r\n                              item.change === \"RISE\" ? (\r\n                                <td className=\"lightMode\" id=\"owned-td-changeRate\">\r\n                                  <span className=\"td-rise\">\r\n                                    +{(item.change_rate * 100).toFixed(2)}% <br />{\" \"}\r\n                                    {item.change_price.toLocaleString()}\r\n                                  </span>\r\n                                </td>\r\n                              ) : item.change === \"FALL\" ? (\r\n                                <td className=\"lightMode\" id=\"owned-td-changeRate\">\r\n                                  <span className=\"td-fall\">\r\n                                    -{(item.change_rate * 100).toFixed(2)}% <br />{\" \"}\r\n                                    {item.change_price.toLocaleString()}\r\n                                  </span>\r\n                                </td>\r\n                              ) : (\r\n                                <td className=\"lightMode\" id=\"owned-td-changeRate\">\r\n                                  <span>\r\n                                    {(item.change_rate * 100).toFixed(2)}% <br />{\" \"}\r\n                                    {item.change_price.toLocaleString()}\r\n                                  </span>\r\n                                </td>\r\n                              )}\r\n                            <td className=\"lightMode\" id=\"owned-td-quantity\">\r\n                              <span className=\"td-volume\">\r\n                                {userOwnedQuantity}\r\n                              </span>\r\n                            </td>\r\n                          </tr>\r\n                        )\r\n                      );\r\n                    })}\r\n                </tbody>\r\n              </table>\r\n            </SimpleBar>\r\n          ) : (\r\n            <div className=\"crypto-notice\">\r\n              보유 화폐를 확인하시려면 로그인 해주세요.\r\n            </div>\r\n          )\r\n        ) : logInEmail !== \"\" ? (\r\n          // 관심 화폐 영역\r\n          <SimpleBar className=\"scrollBar-listTable\">\r\n            <table className=\"list-table\">\r\n              <colgroup>\r\n                <col width={150} />\r\n                <col width={90} />\r\n                <col width={90} />\r\n                <col width={90} />\r\n              </colgroup>\r\n              <tbody className=\"scrollable-tbody\">\r\n                {/* 검색값을 반환한 filteredData 함수를 다시 반복문을 이용하여 출력 */}\r\n                {filteredData.map((item, i) => {\r\n\r\n                  // 가격의 변화가 생긴 state를 테이블에서 찾아 해당 td 시각화\r\n                  let isChanged = differences.some((diff, index) => {\r\n                    return diff.index === i && diff.newValue === item.price;\r\n                  });\r\n                  let priceClass_rise = isChanged ? \"change-price-rise\" : \"\";\r\n                  let priceClass_fall = isChanged ? \"change-price-fall\" : \"\";\r\n\r\n                  // DB에서 가져온 관심화폐 목록과 일치하는 행을 찾음\r\n                  let isFavorited =\r\n                    Array.isArray(favoriteCrypto) &&\r\n                    favoriteCrypto.some((diff, index) => {\r\n                      return item.name === diff.crypto_name;\r\n                    });\r\n\r\n                  return (\r\n                    // 관심화폐만 출력\r\n                    isFavorited && (\r\n                      <tr\r\n                        key={i}\r\n                        onClick={() => {\r\n                          dispatch(setBuyingPrice(filteredData[i].price)); // 특정 화폐를 클릭하면 해당 화폐의 값으로 '매수가격'이 업데이트 됨\r\n                          dispatch(setSellingPrice(filteredData[i].price)); // 특정 화폐를 클릭하면 해당 화폐의 값으로 '매도가격'이 업데이트 됨\r\n                          nameSelect(filteredData[i].name);\r\n                          marketSelect(filteredData[i].market);\r\n                          setSelectedCrypto(filteredData[i]);\r\n                          selectMarket_date(filteredData[i].market);\r\n                          selectMarket_time(\r\n                            filteredData[i].market,\r\n                            selectedChartSort\r\n                          );\r\n                          selectAskingPrice(filteredData[i].market);\r\n                          selectClosedPrice(filteredData[i].market);\r\n                        }}\r\n                      >\r\n                        <td className=\"td-name lightMode\">\r\n                          <span className=\"span-star\">\r\n                            <img\r\n                              onClick={() => {\r\n                                starClick(i);\r\n                                addCryptoToUser(logInEmail, filteredData[i].name);\r\n                              }}\r\n                              // 최초 star[i]의 상태는 'starOn'일 수가 없으므로 반드시 starOff 출력\r\n                              // src={star[i] === 'starOn' ? starOn : starOff}\r\n                              src={isFavorited ? starOn : starOff}\r\n                              alt=\"star\"\r\n                            />\r\n                          </span>\r\n                          <div className=\"div-name\">\r\n                            <div>{item.name}</div>\r\n                            <div>{item.market}</div>\r\n                          </div>\r\n                        </td>\r\n\r\n                        {/* 전일 대비 가격이 상승했다면 청색, 하락했다면 적색, 동일하다면 검정색 */}\r\n                        {item.change === \"RISE\" ? (\r\n                          <td className=\"lightMode\">\r\n                            <span className={`td-rise ${priceClass_rise}`}>\r\n                              {item.price.toLocaleString()}\r\n                            </span>\r\n                          </td>\r\n                        ) : item.change === \"FALL\" ? (\r\n                          <td className=\"lightMode\">\r\n                            <span className={`td-fall ${priceClass_fall}`}>\r\n                              {item.price.toLocaleString()}\r\n                            </span>\r\n                          </td>\r\n                        ) : (\r\n                          <td className=\"lightMode\">\r\n                            <span>{item.price.toLocaleString()}</span>\r\n                          </td>\r\n                        )}\r\n                        {item.change === \"RISE\" ? (\r\n                          <td className=\"lightMode\">\r\n                            <span className=\"td-rise\">\r\n                              +{(item.change_rate * 100).toFixed(2)}% <br />{\" \"}\r\n                              {item.change_price.toLocaleString()}\r\n                            </span>\r\n                          </td>\r\n                        ) : item.change === \"FALL\" ? (\r\n                          <td className=\"lightMode\">\r\n                            <span className=\"td-fall\">\r\n                              -{(item.change_rate * 100).toFixed(2)}% <br />{\" \"}\r\n                              {item.change_price.toLocaleString()}\r\n                            </span>\r\n                          </td>\r\n                        ) : (\r\n                          <td className=\"lightMode\">\r\n                            <span>\r\n                              {(item.change_rate * 100).toFixed(2)}% <br />{\" \"}\r\n                              {item.change_price.toLocaleString()}\r\n                            </span>\r\n                          </td>\r\n                        )}\r\n                        <td className=\"lightMode\">\r\n                          <span className=\"td-volume\">\r\n                            {Number(\r\n                              String(Math.floor(item.trade_price)).slice(0, -6)\r\n                            ).toLocaleString()}\r\n                            백만\r\n                          </span>\r\n                        </td>\r\n                      </tr>\r\n                    )\r\n                  );\r\n                })}\r\n              </tbody>\r\n            </table>\r\n          </SimpleBar>\r\n        ) : (\r\n          <div className=\"crypto-notice\">\r\n            관심 화폐를 확인하시려면 로그인 해주세요.\r\n          </div>\r\n        )\r\n      }\r\n    </div >\r\n  );\r\n};\r\n\r\nexport { CryptoList };\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}