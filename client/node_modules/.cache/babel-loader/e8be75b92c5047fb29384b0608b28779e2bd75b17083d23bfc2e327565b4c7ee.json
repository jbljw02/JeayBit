{"ast":null,"code":"var _s = $RefreshSig$();\nimport axios from \"axios\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { setUserWallet, setOwnedCrypto, setUserTradeHistory, setUserTradeHistory_unSigned, setIsBuying, setAsking_data, setAsking_dateTime, setAsking_totalAskSize, setAsking_totalBidSize, setAskingData_unSigned, setIsSelling, setTheme } from \"../store\";\nexport default function useFunction() {\n  _s();\n  const dispatch = useDispatch();\n  const logInUser = useSelector(state => state.logInUser);\n  const logInEmail = useSelector(state => state.logInEmail);\n  const filteredData = useSelector(state => state.filteredData);\n  const theme = useSelector(state => state.theme);\n\n  // 서버로부터 사용자의 잔고량을 받아옴\n  const getBalance = email => {\n    (async () => {\n      try {\n        const response = await axios.get(`http://127.0.0.1:8000/get_user_balance/${email}/`);\n        dispatch(setUserWallet(response.data.user_balance));\n        console.log(logInUser, \"의 잔고 : \", response.data.user_balance);\n      } catch (error) {\n        console.log(error);\n      }\n    })();\n  };\n\n  // 사용자가 소유하고 있는 화폐의 정보를 받아옴\n  const getOwnedCrypto = logInEmail => {\n    (async () => {\n      try {\n        const response = await axios.get(`http://127.0.0.1:8000/get_user_ownedCrypto/${logInEmail}/`);\n        dispatch(setOwnedCrypto(response.data));\n        console.log(\"반환값-소유화폐 : \", response.data);\n      } catch (error) {\n        console.log(error);\n      }\n    })();\n  };\n\n  // 거래 내역에 저장될 정보를 전송(화폐 매수와 함께)\n  const addTradeHistory = (email, cryptoName, tradeCategory, tradeTime, cryptoMarket, cryptoPrice, tradePrice, tradeAmount, isSigned) => {\n    (async (email, cryptoName, tradeTime, cryptoMarket, cryptoPrice, tradePrice, tradeAmount) => {\n      try {\n        const response = await axios.post(\"http://127.0.0.1:8000/add_user_tradeHistory/\", {\n          email: email,\n          crypto_name: cryptoName,\n          trade_category: tradeCategory,\n          trade_time: tradeTime,\n          crypto_market: cryptoMarket,\n          crypto_price: cryptoPrice,\n          trade_price: tradePrice,\n          trade_amount: tradeAmount,\n          is_signed: isSigned\n        });\n        getTradeHistory(logInEmail);\n        console.log(\"거래 내역 전송 성공\", response.data);\n      } catch (error) {\n        console.log(\"거래 내역 전송 실패\", error);\n      }\n    })(email, cryptoName, tradeTime, cryptoMarket, cryptoPrice, tradePrice, tradeAmount);\n  };\n\n  // 서버로부터 거래 내역을 받아옴\n  const getTradeHistory = logInEmail => {\n    (async () => {\n      try {\n        const response = await axios.get(`http://127.0.0.1:8000/get_user_tradeHistory/${logInEmail}/`);\n        console.log(\"반환값-거래내역 : \", response.data);\n\n        // 서버로부터 받아온 체결 내역과 미체결 내역을 담을 임시 배열\n        const signed = [];\n        const unsigned = [];\n\n        // 다른 요소는 서버에서 받아온 값 그대로 유지, 거래 시간만 형식 변경해서 dispatch\n        response.data.forEach((item, i) => {\n          let date = new Date(item.trade_time);\n          let formattedDate = date.getFullYear() + '.' + (date.getMonth() + 1).toString().padStart(2, '0') + '.' + date.getDate().toString().padStart(2, '0') + ' ' + date.getHours().toString().padStart(2, '0') + ':' + date.getMinutes().toString().padStart(2, '0');\n\n          // 체결 여부가 true일 경우\n          if (item.is_signed) {\n            signed.push({\n              ...item,\n              trade_time: formattedDate\n            });\n          } else {\n            unsigned.push({\n              ...item,\n              trade_time: formattedDate\n            });\n            let value = {\n              name: item.crypto_name,\n              price: item.crypto_price,\n              trade_amount: Number(item.trade_amount),\n              trade_price: Number(item.trade_price)\n            };\n            localStorage.setItem(item.id, JSON.stringify(value)); // 체결되지 않은 구매 요청에 대한 ID를 로컬 스토리지에 추가\n          }\n        });\n\n        dispatch(setUserTradeHistory(signed));\n        dispatch(setUserTradeHistory_unSigned(unsigned));\n      } catch (error) {\n        console.log(\"거래내역 받아오기 실패\", error);\n      }\n    })();\n  };\n\n  // 모든 화폐의 이름을 받아옴\n  const getCryptoName = logInEmail => {\n    (async () => {\n      try {\n        const response = await axios.get('http://127.0.0.1:8000/get_crypto_name/');\n        let cryptoNames = response.data.detail;\n        let localStorageItem = [];\n        for (let i = 0; i < localStorage.length; i++) {\n          let key = localStorage.key(i);\n          if (key !== null) {\n            let value = localStorage.getItem(key);\n            if (value !== null) {\n              let item = JSON.parse(value);\n              localStorageItem.push(item.name);\n            }\n          }\n        }\n\n        // 로컬 스토리지의 값에 있는(체결되지 않은) 화폐는 true로, 아니라면 false로 선언\n        let isWaitingTemp = cryptoNames.reduce((obj, name) => {\n          if (localStorageItem.includes(name)) {\n            obj[name] = true;\n          } else {\n            obj[name] = false;\n          }\n          return obj;\n        }, {});\n        dispatch(setIsBuying(isWaitingTemp));\n        dispatch(setIsSelling(isWaitingTemp));\n        localStorage.setItem(`${logInEmail}_IsBuying`, JSON.stringify(isWaitingTemp));\n        localStorage.setItem(`${logInEmail}_IsSelling`, JSON.stringify(isWaitingTemp));\n      } catch (error) {\n        console.log(\"화폐명 받아오기 실패\", error);\n      }\n    })();\n  };\n\n  // 선택된 화폐에 대한 호가내역 호출\n  const selectAskingPrice = market => {\n    (async market => {\n      try {\n        const response = await axios.post(\"http://127.0.0.1:8000/asking_price/\", {\n          market: market\n        }, {\n          headers: {\n            \"Content-Type\": \"application/json\"\n          }\n        });\n\n        // console.log(\"호가내역 : \", response.data[0].orderbook_units);\n        dispatch(setAsking_data(response.data[0].orderbook_units));\n        dispatch(setAsking_dateTime(response.data[0].timestamp));\n        dispatch(setAsking_totalAskSize(response.data[0].total_ask_size));\n        dispatch(setAsking_totalBidSize(response.data[0].total_bid_size));\n      } catch (error) {\n        console.error(\"호가내역 전송 실패\", error);\n      }\n    })(market);\n  };\n\n  // 미체결 화폐에 대한 호가내역 호출\n  const selectAskingPrice_unSigned = market => {\n    (async market => {\n      try {\n        const response = await axios.post(\"http://127.0.0.1:8000/asking_price/\", {\n          market: market\n        }, {\n          headers: {\n            \"Content-Type\": \"application/json\"\n          }\n        });\n\n        // console.log(\"호가내역-미체결 : \", response.data[0]);\n\n        let tempState = response.data[0].orderbook_units.map(item => ({\n          ask_price: item.ask_price,\n          bid_price: item.bid_price\n        }));\n\n        // dispatch(setAskingData_unSigned({ market: response.data[0].market, data: tempState }));\n\n        // 마켓명에 대응하는 화폐명을 찾음\n        let isCorresponed = filteredData.find(item => item.market === response.data[0].market);\n        let marketName = isCorresponed ? isCorresponed.name : null;\n\n        // 마켓명이 아닌 화폐명을 키로 지정\n        if (marketName) {\n          dispatch(setAskingData_unSigned({\n            market: marketName,\n            data: tempState\n          }));\n        }\n\n        // console.log(\"미체결 호가값 : \", askingData_unSigned);\n      } catch (error) {\n        console.error(\"호가내역-미체결 전송 실패\", error);\n      }\n    })(market);\n  };\n\n  // 호가와 구매가가 일치하지 않을 때\n  const buyCrypto_unSigned = (key, email, cryptoName, cryptoQuantity, buyTotal) => {\n    (async (key, email, cryptoName, cryptoQuantity, buyTotal) => {\n      try {\n        const response = await axios.post(\"http://127.0.0.1:8000/buy_crypto_unSigned/\", {\n          key: key,\n          email: email,\n          crypto_name: cryptoName,\n          crypto_quantity: cryptoQuantity,\n          buy_total: buyTotal\n        });\n        console.log(\"구매 화폐 전송 성공\", response.data);\n        getBalance(logInEmail); // 매수에 사용한 금액만큼 차감되기 때문에 잔고 업데이트\n        getOwnedCrypto(logInEmail); // 소유 화폐가 새로 추가될 수 있으니 업데이트\n        getTradeHistory(logInEmail); // 매수에 성공했으니 거래내역 업데이트\n        localStorage.removeItem(key);\n      } catch (error) {\n        console.log(\"구매 화폐 전송 실패: \", error);\n      }\n    })(key, email, cryptoName, cryptoQuantity, buyTotal);\n  };\n  const sellCrypto_unSigned = (key, email, cryptoName, cryptoQuantity, sellTotal) => {\n    (async (key, email, cryptoName, cryptoQuantity, sellTotal) => {\n      try {\n        const response = await axios.post(\"http://127.0.0.1:8000/sell_crypto_unSigned/\", {\n          key: key,\n          email: email,\n          crypto_name: cryptoName,\n          crypto_quantity: cryptoQuantity,\n          sell_total: sellTotal\n        });\n        console.log(\"매도 화폐 전송 성공\", response.data);\n        getBalance(logInEmail); // 매수에 사용한 금액만큼 차감되기 때문에 잔고 업데이트\n        getOwnedCrypto(logInEmail); // 소유 화폐가 새로 추가될 수 있으니 업데이트\n        getTradeHistory(logInEmail); // 매수에 성공했으니 거래내역 업데이트\n        localStorage.removeItem(key);\n      } catch (error) {\n        console.log(\"매도 화폐 전송 실패: \", error);\n      }\n    })(key, email, cryptoName, cryptoQuantity, sellTotal);\n  };\n  const themeChange = () => {\n    dispatch(setTheme(!theme));\n    let generalTheme = document.querySelectorAll(\".lightMode, .darkMode\");\n    let titleTheme = document.querySelectorAll(\".lightMode-title, .darkMode-title\");\n    let titleImgTheme = document.querySelectorAll(\".title-img-light, .title-img-dark\");\n    let hoverTheme = document.querySelectorAll(\".hover-lightMode, .hover-darkMode\");\n\n    // 라이트모드 <-> 다크모드 순회\n    generalTheme.forEach(element => {\n      if (!theme) {\n        element.classList.remove(\"lightMode\");\n        element.classList.add(\"darkMode\");\n      } else {\n        element.classList.remove(\"darkMode\");\n        element.classList.add(\"lightMode\");\n      }\n    });\n    titleTheme.forEach(element => {\n      if (!theme) {\n        element.classList.remove(\"lightMode-title\");\n        element.classList.add(\"darkMode-title\");\n      } else {\n        element.classList.remove(\"darkMode-title\");\n        element.classList.add(\"lightMode-title\");\n      }\n    });\n    titleImgTheme.forEach(element => {\n      if (!theme) {\n        element.classList.remove(\"title-img-light\");\n        element.classList.add(\"title-img-dark\");\n      } else {\n        element.classList.remove(\"title-img-dark\");\n        element.classList.add(\"title-img-light\");\n      }\n    });\n    hoverTheme.forEach(element => {\n      if (!theme) {\n        element.classList.remove(\"hover-lightMode\");\n        element.classList.add(\"hover-darkMode\");\n      } else {\n        element.classList.remove(\"hover-darkMode\");\n        element.classList.add(\"hover-lightMode\");\n      }\n    });\n  };\n  return {\n    getBalance,\n    getOwnedCrypto,\n    addTradeHistory,\n    getTradeHistory,\n    getCryptoName,\n    selectAskingPrice,\n    selectAskingPrice_unSigned,\n    buyCrypto_unSigned,\n    sellCrypto_unSigned,\n    themeChange\n  };\n}\n_s(useFunction, \"aGOMRpI7AkiqaeQff/7MMUI/5qQ=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector, useSelector];\n});","map":{"version":3,"names":["axios","useDispatch","useSelector","setUserWallet","setOwnedCrypto","setUserTradeHistory","setUserTradeHistory_unSigned","setIsBuying","setAsking_data","setAsking_dateTime","setAsking_totalAskSize","setAsking_totalBidSize","setAskingData_unSigned","setIsSelling","setTheme","useFunction","_s","dispatch","logInUser","state","logInEmail","filteredData","theme","getBalance","email","response","get","data","user_balance","console","log","error","getOwnedCrypto","addTradeHistory","cryptoName","tradeCategory","tradeTime","cryptoMarket","cryptoPrice","tradePrice","tradeAmount","isSigned","post","crypto_name","trade_category","trade_time","crypto_market","crypto_price","trade_price","trade_amount","is_signed","getTradeHistory","signed","unsigned","forEach","item","i","date","Date","formattedDate","getFullYear","getMonth","toString","padStart","getDate","getHours","getMinutes","push","value","name","price","Number","localStorage","setItem","id","JSON","stringify","getCryptoName","cryptoNames","detail","localStorageItem","length","key","getItem","parse","isWaitingTemp","reduce","obj","includes","selectAskingPrice","market","headers","orderbook_units","timestamp","total_ask_size","total_bid_size","selectAskingPrice_unSigned","tempState","map","ask_price","bid_price","isCorresponed","find","marketName","buyCrypto_unSigned","cryptoQuantity","buyTotal","crypto_quantity","buy_total","removeItem","sellCrypto_unSigned","sellTotal","sell_total","themeChange","generalTheme","document","querySelectorAll","titleTheme","titleImgTheme","hoverTheme","element","classList","remove","add"],"sources":["C:/VS_Project/JeayBit/client/src/components/useFuction.tsx"],"sourcesContent":["import axios from \"axios\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { setUserWallet, RootState, setOwnedCrypto, setUserTradeHistory, setUserTradeHistory_unSigned, setIsBuying, setAsking_data, setAsking_dateTime, setAsking_totalAskSize, setAsking_totalBidSize, setAskingData_unSigned, setIsSelling, setTheme } from \"../store\";\r\nimport { useState } from \"react\";\r\n\r\nexport default function useFunction() {\r\n\r\n  const dispatch = useDispatch();\r\n  const logInUser = useSelector((state: RootState) => state.logInUser);\r\n  const logInEmail = useSelector((state: RootState) => state.logInEmail);\r\n  const filteredData = useSelector((state: RootState) => state.filteredData);\r\n  const theme = useSelector((state: RootState) => state.theme);\r\n\r\n  // 서버로부터 사용자의 잔고량을 받아옴\r\n  const getBalance = (email: string) => {\r\n    (async () => {\r\n      try {\r\n        const response = await axios.get(\r\n          `http://127.0.0.1:8000/get_user_balance/${email}/`\r\n        );\r\n        dispatch(setUserWallet(response.data.user_balance));\r\n        console.log(logInUser, \"의 잔고 : \", response.data.user_balance);\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    })();\r\n  };\r\n\r\n  // 사용자가 소유하고 있는 화폐의 정보를 받아옴\r\n  const getOwnedCrypto = (logInEmail: string) => {\r\n    (async () => {\r\n      try {\r\n        const response = await axios.get(\r\n          `http://127.0.0.1:8000/get_user_ownedCrypto/${logInEmail}/`\r\n        );\r\n        dispatch(setOwnedCrypto(response.data))\r\n        console.log(\"반환값-소유화폐 : \", response.data)\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    })()\r\n  }\r\n\r\n  // 거래 내역에 저장될 정보를 전송(화폐 매수와 함께)\r\n  const addTradeHistory = (email: string, cryptoName: string, tradeCategory: string, tradeTime: Date, cryptoMarket: string, cryptoPrice: number, tradePrice: number, tradeAmount: number, isSigned: boolean) => {\r\n    (async (email, cryptoName, tradeTime, cryptoMarket, cryptoPrice, tradePrice, tradeAmount) => {\r\n      try {\r\n        const response = await axios.post(\"http://127.0.0.1:8000/add_user_tradeHistory/\", {\r\n          email: email,\r\n          crypto_name: cryptoName,\r\n          trade_category: tradeCategory,\r\n          trade_time: tradeTime,\r\n          crypto_market: cryptoMarket,\r\n          crypto_price: cryptoPrice,\r\n          trade_price: tradePrice,\r\n          trade_amount: tradeAmount,\r\n          is_signed: isSigned,\r\n        });\r\n        getTradeHistory(logInEmail);\r\n        console.log(\"거래 내역 전송 성공\", response.data)\r\n      } catch (error) {\r\n        console.log(\"거래 내역 전송 실패\", error);\r\n      }\r\n    })(email, cryptoName, tradeTime, cryptoMarket, cryptoPrice, tradePrice, tradeAmount)\r\n  }\r\n\r\n  // 서버로부터 거래 내역을 받아옴\r\n  const getTradeHistory = (logInEmail: string) => {\r\n    (async () => {\r\n      try {\r\n        const response = await axios.get(\r\n          `http://127.0.0.1:8000/get_user_tradeHistory/${logInEmail}/`\r\n        );\r\n        console.log(\"반환값-거래내역 : \", response.data);\r\n\r\n        // 서버로부터 받아온 체결 내역과 미체결 내역을 담을 임시 배열\r\n        const signed: { trade_time: string; is_signed: boolean; id: string; crypto_price: number; crypto_name: string; trade_amount: string; trade_price: string; }[] = [];\r\n        const unsigned: { trade_time: string; is_signed: boolean; id: string; crypto_price: number; crypto_name: string; trade_amount: string; trade_price: string; }[] = [];\r\n\r\n        // 다른 요소는 서버에서 받아온 값 그대로 유지, 거래 시간만 형식 변경해서 dispatch\r\n        response.data.forEach((item: { trade_time: Date, is_signed: boolean, id: string, crypto_price: number, crypto_name: string, trade_amount: string, trade_price: string }, i: number) => {\r\n          let date = new Date(item.trade_time);\r\n          let formattedDate = date.getFullYear() + '.'\r\n            + (date.getMonth() + 1).toString().padStart(2, '0') + '.'\r\n            + date.getDate().toString().padStart(2, '0') + ' '\r\n            + date.getHours().toString().padStart(2, '0') + ':'\r\n            + date.getMinutes().toString().padStart(2, '0');\r\n        \r\n          // 체결 여부가 true일 경우\r\n          if (item.is_signed) {\r\n            signed.push({ ...item, trade_time: formattedDate });\r\n          }\r\n          else {\r\n            unsigned.push({ ...item, trade_time: formattedDate });\r\n        \r\n            let value = { name: item.crypto_name, price: item.crypto_price, trade_amount: Number(item.trade_amount), trade_price: Number(item.trade_price) };\r\n            localStorage.setItem(item.id, JSON.stringify(value));  // 체결되지 않은 구매 요청에 대한 ID를 로컬 스토리지에 추가\r\n          }\r\n        });\r\n\r\n        dispatch(setUserTradeHistory(signed));\r\n        dispatch(setUserTradeHistory_unSigned(unsigned));\r\n      } catch (error) {\r\n        console.log(\"거래내역 받아오기 실패\", error);\r\n      }\r\n    })();\r\n  }\r\n\r\n  // 모든 화폐의 이름을 받아옴\r\n  const getCryptoName = (logInEmail: string) => {\r\n    (async () => {\r\n      try {\r\n        const response = await axios.get(\r\n          'http://127.0.0.1:8000/get_crypto_name/'\r\n        );\r\n\r\n        let cryptoNames = response.data.detail;\r\n\r\n        let localStorageItem: string[] = [];\r\n        for (let i = 0; i < localStorage.length; i++) {\r\n          let key = localStorage.key(i);\r\n          if (key !== null) {\r\n            let value = localStorage.getItem(key);\r\n            if (value !== null) {\r\n              let item = JSON.parse(value);\r\n              localStorageItem.push(item.name);\r\n            }\r\n          }\r\n        }\r\n\r\n        // 로컬 스토리지의 값에 있는(체결되지 않은) 화폐는 true로, 아니라면 false로 선언\r\n        let isWaitingTemp = cryptoNames.reduce((obj: { [obj: string]: boolean; }, name: string) => {\r\n          if (localStorageItem.includes(name)) {\r\n            obj[name] = true;\r\n          }\r\n          else {\r\n            obj[name] = false;\r\n          }\r\n          return obj;\r\n        }, {})\r\n\r\n        dispatch(setIsBuying(isWaitingTemp));\r\n        dispatch(setIsSelling(isWaitingTemp));\r\n        localStorage.setItem(`${logInEmail}_IsBuying`, JSON.stringify(isWaitingTemp));\r\n        localStorage.setItem(`${logInEmail}_IsSelling`, JSON.stringify(isWaitingTemp));\r\n      } catch (error) {\r\n        console.log(\"화폐명 받아오기 실패\", error);\r\n      }\r\n    })();\r\n  }\r\n\r\n  // 선택된 화폐에 대한 호가내역 호출\r\n  const selectAskingPrice = (market: string) => {\r\n    (async (market) => {\r\n      try {\r\n        const response = await axios.post(\r\n          \"http://127.0.0.1:8000/asking_price/\",\r\n          {\r\n            market: market,\r\n          },\r\n          {\r\n            headers: {\r\n              \"Content-Type\": \"application/json\",\r\n            },\r\n          }\r\n        );\r\n\r\n        // console.log(\"호가내역 : \", response.data[0].orderbook_units);\r\n        dispatch(setAsking_data(response.data[0].orderbook_units));\r\n        dispatch(setAsking_dateTime(response.data[0].timestamp));\r\n        dispatch(setAsking_totalAskSize(response.data[0].total_ask_size));\r\n        dispatch(setAsking_totalBidSize(response.data[0].total_bid_size));\r\n      } catch (error) {\r\n        console.error(\"호가내역 전송 실패\", error);\r\n      }\r\n    })(market);\r\n  };\r\n\r\n  // 미체결 화폐에 대한 호가내역 호출\r\n  const selectAskingPrice_unSigned = (market: string) => {\r\n    (async (market) => {\r\n      try {\r\n        const response = await axios.post(\r\n          \"http://127.0.0.1:8000/asking_price/\",\r\n          {\r\n            market: market,\r\n          },\r\n          {\r\n            headers: {\r\n              \"Content-Type\": \"application/json\",\r\n            },\r\n          }\r\n        );\r\n\r\n        // console.log(\"호가내역-미체결 : \", response.data[0]);\r\n\r\n        let tempState = response.data[0].orderbook_units.map((item: { ask_price: number; bid_price: number; }) => ({\r\n          ask_price: item.ask_price,\r\n          bid_price: item.bid_price\r\n        }));\r\n\r\n        // dispatch(setAskingData_unSigned({ market: response.data[0].market, data: tempState }));\r\n\r\n        // 마켓명에 대응하는 화폐명을 찾음\r\n        let isCorresponed = filteredData.find(item => item.market === response.data[0].market);\r\n        let marketName = isCorresponed ? isCorresponed.name : null;\r\n\r\n        // 마켓명이 아닌 화폐명을 키로 지정\r\n        if (marketName) {\r\n          dispatch(setAskingData_unSigned({ market: marketName, data: tempState }));\r\n        }\r\n\r\n        // console.log(\"미체결 호가값 : \", askingData_unSigned);\r\n      } catch (error) {\r\n        console.error(\"호가내역-미체결 전송 실패\", error);\r\n      }\r\n    })(market);\r\n  };\r\n\r\n  // 호가와 구매가가 일치하지 않을 때\r\n  const buyCrypto_unSigned = (key: string, email: string, cryptoName: string, cryptoQuantity: number, buyTotal: number) => {\r\n    (async (key, email, cryptoName, cryptoQuantity, buyTotal) => {\r\n      try {\r\n        const response = await axios.post(\"http://127.0.0.1:8000/buy_crypto_unSigned/\", {\r\n          key: key,\r\n          email: email,\r\n          crypto_name: cryptoName,\r\n          crypto_quantity: cryptoQuantity,\r\n          buy_total: buyTotal,\r\n        });\r\n        console.log(\"구매 화폐 전송 성공\", response.data);\r\n        getBalance(logInEmail);  // 매수에 사용한 금액만큼 차감되기 때문에 잔고 업데이트\r\n        getOwnedCrypto(logInEmail);  // 소유 화폐가 새로 추가될 수 있으니 업데이트\r\n        getTradeHistory(logInEmail)  // 매수에 성공했으니 거래내역 업데이트\r\n        localStorage.removeItem(key)\r\n      } catch (error) {\r\n        console.log(\"구매 화폐 전송 실패: \", error)\r\n      }\r\n    })(key, email, cryptoName, cryptoQuantity, buyTotal);\r\n  }\r\n\r\n  const sellCrypto_unSigned = (key: string, email: string, cryptoName: string, cryptoQuantity: number, sellTotal: number) => {\r\n    (async (key, email, cryptoName, cryptoQuantity, sellTotal) => {\r\n      try {\r\n        const response = await axios.post(\"http://127.0.0.1:8000/sell_crypto_unSigned/\", {\r\n          key: key,\r\n          email: email,\r\n          crypto_name: cryptoName,\r\n          crypto_quantity: cryptoQuantity,\r\n          sell_total: sellTotal,\r\n        });\r\n        console.log(\"매도 화폐 전송 성공\", response.data);\r\n        getBalance(logInEmail);  // 매수에 사용한 금액만큼 차감되기 때문에 잔고 업데이트\r\n        getOwnedCrypto(logInEmail);  // 소유 화폐가 새로 추가될 수 있으니 업데이트\r\n        getTradeHistory(logInEmail)  // 매수에 성공했으니 거래내역 업데이트\r\n        localStorage.removeItem(key)\r\n      } catch (error) {\r\n        console.log(\"매도 화폐 전송 실패: \", error)\r\n      }\r\n    })(key, email, cryptoName, cryptoQuantity, sellTotal);\r\n  }\r\n\r\n  const themeChange = () => {\r\n\r\n    dispatch(setTheme(!theme));\r\n    let generalTheme = document.querySelectorAll(\".lightMode, .darkMode\");\r\n    let titleTheme = document.querySelectorAll(\r\n      \".lightMode-title, .darkMode-title\"\r\n    );\r\n    let titleImgTheme = document.querySelectorAll(\r\n      \".title-img-light, .title-img-dark\"\r\n    );\r\n    let hoverTheme = document.querySelectorAll(\r\n      \".hover-lightMode, .hover-darkMode\"\r\n    );\r\n\r\n    // 라이트모드 <-> 다크모드 순회\r\n    generalTheme.forEach((element) => {\r\n      if (!theme) {\r\n        element.classList.remove(\"lightMode\");\r\n        element.classList.add(\"darkMode\");\r\n      } else {\r\n        element.classList.remove(\"darkMode\");\r\n        element.classList.add(\"lightMode\");\r\n      }\r\n    });\r\n\r\n    titleTheme.forEach((element) => {\r\n      if (!theme) {\r\n        element.classList.remove(\"lightMode-title\");\r\n        element.classList.add(\"darkMode-title\");\r\n      } else {\r\n        element.classList.remove(\"darkMode-title\");\r\n        element.classList.add(\"lightMode-title\");\r\n      }\r\n    });\r\n\r\n    titleImgTheme.forEach((element) => {\r\n      if (!theme) {\r\n        element.classList.remove(\"title-img-light\");\r\n        element.classList.add(\"title-img-dark\");\r\n      } else {\r\n        element.classList.remove(\"title-img-dark\");\r\n        element.classList.add(\"title-img-light\");\r\n      }\r\n    });\r\n\r\n    hoverTheme.forEach((element) => {\r\n      if (!theme) {\r\n        element.classList.remove(\"hover-lightMode\");\r\n        element.classList.add(\"hover-darkMode\");\r\n      } else {\r\n        element.classList.remove(\"hover-darkMode\");\r\n        element.classList.add(\"hover-lightMode\");\r\n      }\r\n    });\r\n  };\r\n\r\n  return { getBalance, getOwnedCrypto, addTradeHistory, getTradeHistory, getCryptoName, selectAskingPrice, selectAskingPrice_unSigned, buyCrypto_unSigned, sellCrypto_unSigned, themeChange };\r\n\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}